{
  "docs": [
    {
      "slug": "readme",
      "title": "Initialize a new nizam config (default: postgres, redis, meilisearch)",
      "content": "<p align=\"center\">\n  <img src=\"https://res.cloudinary.com/friendly-social/image/upload/v1754947220/nizam_logo_blue_kyt9ck.png\" alt=\"Nizam Logo\" width=\"200\" style=\"margin-bottom:-60px;\"><br>\n  <b>nizam</b> is a powerful CLI tool to manage, monitor, and interact with local development services (Postgres, Redis, Meilisearch, etc.) using Docker. It helps you spin up, shut down, and interact with common services without manually writing <code>docker run</code> or service-specific commands.\n</p>\n\n## Features\n\n### Core Service Management\n\n- üöÄ **One-command service management**: `nizam up postgres redis`\n- üéõÔ∏è **Interactive template configuration**: Customize ports, credentials, and settings\n- üìä **Service monitoring**: `nizam status` shows health of all services\n- üìù **Log tailing**: `nizam logs redis` to debug issues\n- üíª **Direct service interaction**: `nizam exec postgres psql -U user`\n- üê≥ **Docker-native**: Uses Docker containers with sensible defaults\n\n### Data Lifecycle Management\n\n- üì∏ **Database Snapshots**: Create, restore, list, and prune database snapshots with `nizam snapshot`\n  - **Multi-engine support**: PostgreSQL, MySQL, and Redis (MongoDB planned)\n  - **Compression options**: zstd (default), gzip, or none\n  - **Atomic operations**: Safe snapshot creation and restoration\n  - **Metadata tracking**: Tagged snapshots with notes and checksums\n- üîó **One-liner Database Access**: Smart CLI tools with auto-resolved connections\n  - `nizam psql [service]` - Connect to PostgreSQL with resolved credentials\n  - `nizam mysql [service]` - Connect to MySQL with auto-resolved credentials\n  - `nizam redis-cli [service]` - Connect to Redis with auto-configuration\n  - `nizam mongosh [service]` - Connect to MongoDB with auto-configuration\n  - **Fallback execution**: Uses host binaries or container execution automatically\n\n### Development & Operations Tools\n\n- ü©∫ **Environment Doctor**: Comprehensive preflight checks with `nizam doctor`\n- üîç **Configuration Linting**: Best practices validation with `nizam lint`\n- ‚úÖ **Config Validation**: Syntax and structure validation with `nizam validate`\n- ‚ö° **Retry Operations**: Exponential backoff retry for failed operations\n- üïí **Service Readiness**: Wait for services with `nizam wait-for`\n- üîÑ **Self-Update**: Automatic updates from GitHub releases\n- üß© **Shell Completion**: Multi-shell completion support\n\n## Quick Start\n\n```bash\n# Initialize a new nizam config (default: postgres, redis, meilisearch)\nnizam init\n\n# Or initialize with custom services\nnizam init --add \"mysql, mongodb, prometheus\"\n\n# Browse available service templates\nnizam templates\n\n# Add services from templates\nnizam add mysql\nnizam add redis --name cache\n\n# Remove services from configuration\nnizam remove mysql\nnizam remove redis postgres --force\n\n# Start services\nnizam up mysql cache\n\n# Check service status\nnizam status\n\n# View logs\nnizam logs mysql\n\n# Execute commands in service containers\nnizam exec mysql mysql -u user -p\n\n# Stop all services\nnizam down\n```\n\n## Installation\n\n### From Source\n\n```bash\ngit clone https://github.com/abdultolba/nizam.git\ncd nizam\ngo build -o nizam\nsudo mv nizam /usr/local/bin/\n```\n\n### Homebrew (Coming Soon)\n\n```bash\nbrew install abdultolba/tap/nizam\n```\n\n## Configuration\n\nnizam uses a `.nizam.yaml` file to define your services:\n\n```yaml\nprofile: dev\nservices:\n  postgres:\n    image: postgres:16\n    ports:\n      - 5432:5432\n    env:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volume: pgdata\n\n  redis:\n    image: redis:7\n    ports:\n      - 6379:6379\n\n  meilisearch:\n    image: getmeili/meilisearch\n    ports:\n      - 7700:7700\n```\n\n## Service Templates\n\nnizam includes 16+ built-in service templates for popular development tools:\n\n**Databases:**\n\n- `postgres` / `postgres-15` - PostgreSQL database\n- `mysql` - MySQL database\n- `mongodb` - MongoDB document database\n- `redis` / `redis-stack` - Redis cache and data store\n- `elasticsearch` - Elasticsearch search engine\n\n**Messaging & Streaming:**\n\n- `rabbitmq` - RabbitMQ message broker\n- `kafka` - Apache Kafka (via Redpanda)\n- `nats` - NATS messaging system\n\n**Monitoring & Observability:**\n\n- `prometheus` - Prometheus metrics collection\n- `grafana` - Grafana visualization\n- `jaeger` - Distributed tracing\n\n**Storage & Search:**\n\n- `minio` - S3-compatible object storage\n- `meilisearch` - Fast search engine\n\n**Development Tools:**\n\n- `mailhog` - Email testing\n\n### Using Templates\n\n```bash\n# List all available templates (built-in + custom)\nnizam templates\n\n# Filter templates by category\nnizam templates --tag database\n\n# Add a service from a template\nnizam add postgres\nnizam add redis --name cache\n```\n\n### Interactive Template Variables\n\nKey templates support interactive configuration of ports, credentials, and settings:\n\n```bash\n# Add with interactive prompts (PostgreSQL, MySQL, Redis, MongoDB, RabbitMQ, etc.)\nnizam add postgres    # You'll be prompted for username, password, port, etc.\n\n# Skip prompts and use default values\nnizam add postgres --defaults\n\n# Add with custom name and interactive config\nnizam add mysql --name production-db\n```\n\nInteractive features include:\n\n- Clear variable descriptions with purpose and usage\n- Default value suggestions shown in brackets\n- Required field indicators and type validation\n- Real-time validation with helpful error messages\n\n### Custom Templates\n\nCreate and manage your own reusable service templates:\n\n```bash\n# Export existing service as custom template\nnizam export mysql --name company-mysql --description \"Our standard MySQL setup\"\n\n# List custom templates only\nnizam custom list\n\n# View detailed template information\nnizam custom show company-mysql\n\n# Use custom template in another project\nnizam add company-mysql\n\n# Delete custom template\nnizam custom delete company-mysql\n\n# Show custom templates directory\nnizam custom dir\n```\n\nCustom templates are stored in `~/.nizam/templates/` and can be shared between projects or with your team.\n\n## Service Management Commands\n\n### Initialization\n\n```bash\n# Initialize with default services (postgres, redis, meilisearch)\nnizam init\n\n# Initialize with custom services\nnizam init --add postgres,mysql,redis\nnizam init --add \"mongodb, prometheus, mailhog\"\n```\n\nThe `init` command always uses default values for template variables to ensure quick setup. Use `nizam add` afterward for interactive configuration.\n\n### Adding Services\n\n```bash\n# Add with interactive configuration\nnizam add postgres\n\n# Add with default values\nnizam add mysql --defaults\n\n# Add with custom name\nnizam add redis --name cache\n```\n\n### Removing Services\n\n```bash\n# Remove single service (stops container and removes from config)\nnizam remove postgres\n\n# Remove multiple services\nnizam remove redis mysql\n\n# Remove all services\nnizam remove --all\n\n# Force removal without confirmation\nnizam remove postgres --force\n\n# Using alias\nnizam rm postgres\n```\n\nThe `remove` command automatically stops running Docker containers before removing services from the configuration.\n\n## Health Check System üè•\n\nnizam includes a comprehensive health check system that monitors your services through multiple check types and provides both CLI and web-based interfaces for monitoring.\n\n### Health Check Features\n\n- üîç **Multiple Check Types**: Command execution, HTTP requests, and Docker status checks\n- üìä **Built-in Templates**: Pre-configured health checks for common services (PostgreSQL, MySQL, Redis)\n- üñ•Ô∏è **CLI Monitoring**: Query health status with multiple output formats\n- üåê **HTTP Server & Dashboard**: Web-based monitoring with REST API\n- üìà **Health History**: Track health check results over time\n- ‚ö° **Real-time Updates**: Live monitoring with configurable intervals\n- üéØ **Per-service Status**: Individual service health tracking and management\n\n### Quick Health Check Examples\n\n```bash\n# Check health of all services (table format)\nnizam health\n\n# Check specific service health\nnizam health postgres\n\n# Output in JSON format\nnizam health --output json\n\n# Watch health status continuously\nnizam health --watch\n\n# Watch with custom interval (5 seconds)\nnizam health --watch --interval 5\n\n# Compact status display\nnizam health --output compact\n```\n\n### Health Check CLI Commands\n\n#### `nizam health` - Health Status Query\n\n```bash\n# Usage patterns\nnizam health [service] [flags]\n\n# Examples\nnizam health                    # All services, table format\nnizam health postgres          # Specific service\nnizam health --output json     # JSON output\nnizam health --watch           # Continuous monitoring\nnizam health --watch --interval 5  # Custom watch interval\n\n# Available flags\n-o, --output string   Output format (table, json, compact)\n-w, --watch           Watch health status continuously\n    --interval int    Watch interval in seconds (default 10)\n```\n\n**Output Formats:**\n\n- **table**: Formatted table with service details, status, and timestamps\n- **json**: Complete health data in JSON format for automation\n- **compact**: Minimal status display with emoji indicators\n\n#### `nizam health-server` - HTTP Health Monitor\n\n```bash\n# Launch health monitoring server\nnizam health-server [flags]\n\n# Examples\nnizam health-server                      # Start on :8080\nnizam health-server --address :9090     # Custom port\nnizam health-server --interval 15       # 15-second check interval\nnizam health-server --no-auto-start     # Manual health check start\n\n# Available flags\n    --address string   HTTP server address (default \":8080\")\n    --interval int     Health check interval in seconds (default 30)\n    --auto-start       Auto-start health checking (default true)\n```\n\n### HTTP API Endpoints\n\nThe health server provides REST API endpoints for integration:\n\n```bash\n# Get overall health summary\nGET /api/health\n\n# Get specific service health\nGET /api/services/{service}\n\n# Trigger immediate health check\nPOST /api/check/{service}\n\n# Get all services health status\nGET /api/services\n```\n\n**Example API Response:**\n\n```json\n{\n  \"service\": \"postgres\",\n  \"status\": \"healthy\",\n  \"is_running\": true,\n  \"container_name\": \"nizam-postgres\",\n  \"image\": \"postgres:16\",\n  \"last_check\": \"2024-08-08T03:45:30Z\",\n  \"check_history\": [\n    {\n      \"status\": \"healthy\",\n      \"message\": \"pg_isready check passed\",\n      \"timestamp\": \"2024-08-08T03:45:30Z\",\n      \"duration\": \"12ms\"\n    }\n  ]\n}\n```\n\n### Web Dashboard\n\nAccess the web dashboard at `http://localhost:8080` when running the health server:\n\n- üìä **Live Status Overview**: Real-time service health monitoring\n- üîÑ **Auto-refresh**: Configurable automatic status updates\n- üéØ **Manual Triggers**: On-demand health check execution\n- üìà **Health History**: Visual timeline of health check results\n- üé® **Responsive UI**: Clean, modern interface with status indicators\n\n### Health Check Configuration\n\nServices can include health check configurations in their templates:\n\n```yaml\n# Example service with health checks\nservices:\n  postgres:\n    image: postgres:16\n    ports:\n      - 5432:5432\n    env:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"user\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n```\n\n**Health Check Types:**\n\n1. **Command Checks**: Execute commands inside containers\n\n   ```yaml\n   test: [\"CMD\", \"pg_isready\", \"-U\", \"user\"]\n   test: [\"CMD-SHELL\", \"curl -f http://localhost:8080/health\"]\n   ```\n\n2. **HTTP Checks**: Automatically detected from curl/wget commands\n\n   ```yaml\n   test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n   ```\n\n3. **Docker Status**: Default fallback using container running status\n\n### Built-in Health Checks\n\nCommon service templates include pre-configured health checks:\n\n| Service           | Health Check      | Command                  |\n| ----------------- | ----------------- | ------------------------ |\n| **PostgreSQL**    | `pg_isready`      | Database connection test |\n| **MySQL**         | `mysqladmin ping` | Database ping test       |\n| **Redis**         | `redis-cli ping`  | Redis ping command       |\n| **MongoDB**       | `mongosh --eval`  | Database status check    |\n| **Elasticsearch** | HTTP health API   | `GET /_health` endpoint  |\n\n### Health Status Types\n\n- üü¢ **healthy**: Service is running and responding correctly\n- üî¥ **unhealthy**: Service is running but health check failed\n- üü° **starting**: Service is starting up (within start_period)\n- ‚ö´ **not_running**: Docker container is not running\n- üü£ **unknown**: Health check status could not be determined\n\n### Use Cases\n\n**Development Workflow:**\n\n```bash\n# Start services\nnizam up postgres redis\n\n# Monitor health during startup\nnizam health --watch\n\n# Check specific service issues\nnizam health postgres\n\n# Launch web dashboard for team monitoring\nnizam health-server --address :8080\n```\n\n**CI/CD Integration:**\n\n```bash\n# Wait for services to be healthy\nnizam health --output json | jq '.status == \"healthy\"'\n\n# Automated health monitoring\nnizam health-server --no-auto-start &\ncurl http://localhost:8080/api/health\n```\n\n**Team Monitoring:**\n\n```bash\n# Shared health dashboard\nnizam health-server --address :3030\n\n# Team members access: http://dev-server:3030\n```\n\n## Data Lifecycle Management üì∏\n\nnizam provides comprehensive data lifecycle tools for database snapshots and one-liner database access, making it easy to capture, restore, and work with database states during development.\n\n### Database Snapshots\n\nCreate point-in-time snapshots of your databases for backup, testing, or sharing data states.\n\n#### Snapshot Features\n\n- üéØ **Multi-engine support**: PostgreSQL, MySQL, and Redis (MongoDB planned)\n- üóúÔ∏è **Smart compression**: zstd (default), gzip, or none with automatic streaming\n- üîí **Data integrity**: SHA256 checksums for all snapshot files\n- üìã **Rich metadata**: Tagged snapshots with notes, timestamps, and version tracking\n- üìÅ **Organized storage**: Structured storage in `.nizam/snapshots/<service>/`\n- ‚ö° **Atomic operations**: Safe creation and restoration with temporary files\n\n#### Quick Snapshot Examples\n\n```bash\n# Create a snapshot with automatic timestamping\nnizam snapshot create postgres\n\n# Create a tagged snapshot with notes\nnizam snapshot create postgres --tag \"before-migration\" --note \"Pre-schema update\"\n\n# Create with different compression\nnizam snapshot create redis --compress gzip\n\n# List all snapshots\nnizam snapshot list\n\n# List snapshots for specific service\nnizam snapshot list postgres\n\n# Restore latest snapshot\nnizam snapshot restore postgres --latest\n\n# Restore specific tagged snapshot\nnizam snapshot restore postgres --tag \"before-migration\"\n\n# Clean up old snapshots (keep 5 most recent)\nnizam snapshot prune postgres --keep 5\n```\n\n#### Snapshot Commands\n\n**`nizam snapshot create <service>`**\n\n```bash\n# Basic snapshot creation\nnizam snapshot create postgres\nnizam snapshot create mysql\nnizam snapshot create redis\n\n# With custom options\nnizam snapshot create postgres --tag \"v1.2.0\" --compress zstd --note \"Release snapshot\"\n\n# Available flags:\n    --compress string   Compression type: zstd, gzip, none (default \"zstd\")\n    --note string      Note/description for the snapshot\n    --tag string       Tag for the snapshot (default: timestamp)\n```\n\n**`nizam snapshot list [service]`**\n\n```bash\n# List all snapshots across all services\nnizam snapshot list\n\n# List snapshots for specific service\nnizam snapshot list postgres\n\n# JSON output for automation\nnizam snapshot list --json\n```\n\n**`nizam snapshot restore <service>`**\n\n```bash\n# Restore latest snapshot\nnizam snapshot restore postgres --latest\n\n# Restore specific tagged snapshot\nnizam snapshot restore postgres --tag \"before-migration\"\n\n# Available flags:\n    --force          Skip confirmation prompts\n    --latest         Restore the most recent snapshot\n    --tag string     Restore snapshot with specific tag\n```\n\n**`nizam snapshot prune <service>`**\n\n```bash\n# Remove old snapshots, keeping 3 most recent\nnizam snapshot prune postgres --keep 3\n\n# Dry run to see what would be deleted\nnizam snapshot prune postgres --keep 5 --dry-run\n\n# Available flags:\n    --dry-run        Show what would be deleted without actually deleting\n    --keep int       Number of snapshots to keep (required)\n```\n\n### One-liner Database Access\n\nConnect to your databases instantly with auto-resolved connection parameters.\n\n#### Features\n\n- üîß **Auto-resolution**: Automatically discovers connection details from configuration\n- üîÑ **Smart fallback**: Uses host binaries when available, falls back to container execution\n- üéØ **Service detection**: Auto-detects the first service of each type if not specified\n- üìã **Pass-through args**: All arguments after `--` are passed directly to the database CLI\n\n#### PostgreSQL Access\n\n**`nizam psql [service]`**\n\n```bash\n# Connect to first/default PostgreSQL service\nnizam psql\n\n# Connect to specific service\nnizam psql postgres\nnizam psql api-db\n\n# Override connection parameters\nnizam psql --user admin --db production\n\n# Pass arguments to psql\nnizam psql -- --help\nnizam psql -- -c \"SELECT version()\"\nnizam psql postgres -- -c \"\\\\l\"\n\n# Available flags:\n    --db string       Database name (override config)\n    --user string     Username (override config)\n```\n\n#### MySQL Access\n\n**`nizam mysql [service]`**\n\n```bash\n# Connect to first/default MySQL service\nnizam mysql\n\n# Connect to specific service\nnizam mysql mysql\nnizam mysql api-db\n\n# Override connection parameters\nnizam mysql --user root --db mysql\n\n# Pass arguments to mysql client\nnizam mysql -- --help\nnizam mysql -- -e \"SHOW DATABASES\"\nnizam mysql api-db -- -e \"SELECT version()\"\n```\n\n**Available flags:**\n\n- `--db string` - Database name (override config)\n- `--user string` - Username (override config)\n\n#### Redis Access\n\n**`nizam redis-cli [service]`**\n\n```bash\n# Connect to first/default Redis service\nnizam redis-cli\n\n# Connect to specific service\nnizam redis-cli redis\nnizam redis-cli cache\n\n# Pass arguments to redis-cli\nnizam redis-cli -- --help\nnizam redis-cli -- ping\nnizam redis-cli cache -- info server\n```\n\n#### Connection Resolution\n\nThe one-liner commands automatically resolve connection details from your configuration:\n\n1. **Service Discovery**: If no service specified, uses the first service of matching type\n2. **Credential Extraction**: Pulls username, password, database, and port from service environment\n3. **Host Binary Detection**: Checks if `psql`, `redis-cli`, etc. are available on the host\n4. **Fallback Execution**: Uses `docker exec` if host binaries are not found\n5. **Connection String Building**: Constructs proper connection URLs with credentials\n\n#### vs. Raw Container Execution\n\n**Key Difference**: `nizam psql` is a **smart database client** that auto-resolves connections, while `nizam exec postgres psql` is **raw container command execution**.\n\n| Feature                   | `nizam psql`                     | `nizam exec postgres psql`         |\n| ------------------------- | -------------------------------- | ---------------------------------- |\n| **Credential resolution** | ‚úÖ Automatic from config         | ‚ùå Manual specification required   |\n| **Connection strings**    | ‚úÖ Auto-built URLs               | ‚ùå Manual argument construction    |\n| **Host binary usage**     | ‚úÖ Uses host `psql` if available | ‚ùå Always executes in container    |\n| **Service discovery**     | ‚úÖ Auto-finds PostgreSQL service | ‚ùå Must specify exact service name |\n| **Ease of use**           | üü¢ Just works                    | üü° Requires connection knowledge   |\n\n**Examples:**\n\n```bash\n# Smart connection (auto-resolves everything)\nnizam psql                           # Connects automatically\nnizam psql -- -c \"SELECT version()\"   # Runs query with auto-connection\nnizam mysql                          # Connects to MySQL automatically\nnizam mysql -- -e \"SHOW DATABASES\"    # Runs MySQL query with auto-connection\n\n# Raw container execution (manual specification required)\nnizam exec postgres psql -U user -d mydb -h localhost\nnizam exec mysql mysql -u user -pmypass mydb\n```\n\n**Example Resolution:**\n\n```yaml\n# .nizam.yaml\nservices:\n  postgres:\n    image: postgres:16\n    ports: [\"5432:5432\"]\n    env:\n      POSTGRES_USER: myuser\n      POSTGRES_PASSWORD: mypass\n      POSTGRES_DB: mydb\n```\n\n```bash\n# This command:\nnizam psql\n\n# Resolves to:\npsql \"postgresql://myuser:mypass@localhost:5432/mydb?sslmode=disable\"\n\n# Or if psql not on host:\ndocker exec -it nizam_postgres psql -U myuser -d mydb\n\n# For MySQL:\nnizam mysql\n\n# Resolves to:\nmysql -h localhost -P 3306 -u myuser -pmypass mydb\n\n# Or if mysql not on host:\ndocker exec -it nizam_mysql mysql -u myuser -h localhost -pmypass mydb\n```\n\n## Development & Operations Tools üõ†Ô∏è\n\nnizam includes comprehensive tooling for development workflow optimization, environment validation, and operational reliability.\n\n### Environment Doctor (`nizam doctor`)\n\nComprehensive preflight environment checks to ensure your Docker setup is ready for development.\n\n```bash\n# Run all environment checks\nnizam doctor\n\n# Skip specific checks\nnizam doctor --skip net.mtu,disk.free\n\n# JSON output for CI/CD integration\nnizam doctor --json\n\n# Attempt automatic fixes\nnizam doctor --fix\n\n# Verbose output with detailed diagnostics\nnizam doctor --verbose\n```\n\n**Checks Performed:**\n\n- üê≥ **Docker connectivity** - Verify Docker daemon is running\n- üîß **Docker Compose** - Ensure compose plugin is available\n- üíæ **Disk space** - Check available storage (warns if <1GB)\n- üåê **Network MTU** - Validate network configuration\n- üö™ **Port conflicts** - Dynamic port availability for all configured services\n\n**Sample Output:**\n\n```\n‚úî docker.daemon       Docker daemon responding\n‚úî docker.compose      Docker Compose plugin available\n! net.mtu              non-standard MTU detected\n  VPNs may lower MTU; if Docker networking is flaky, align MTU in daemon.json\n‚úñ port.5432            port in use\n  Change host port for service postgres in .nizam.yaml\n  Or stop the process using the port\n```\n\n### Configuration Validation (`nizam validate`)\n\nValidate configuration file syntax and structure before deployment.\n\n```bash\n# Validate default configuration\nnizam validate\n\n# Validate specific file\nnizam validate --file ./production.yaml\n\n# JSON output for automation\nnizam validate --json\n\n# Strict mode (exit non-zero on any issues)\nnizam validate --strict\n```\n\n**Validation Features:**\n\n- ‚úÖ YAML syntax validation\n- üîç Service structure verification\n- üìã Required field checking\n- üî¢ Profile validation\n- üìä Multiple output formats\n\n### Configuration Linting (`nizam lint`)\n\nAnalyze configurations for best practices and potential issues.\n\n```bash\n# Lint default configuration\nnizam lint\n\n# Lint specific file\nnizam lint --file ./config.yaml\n\n# JSON output for CI/CD pipelines\nnizam lint --json\n```\n\n**Linting Rules:**\n\n- üö´ **no-latest**: Prevents `:latest` image tags (reproducibility)\n- üîå **ports-shape**: Validates port mapping format\n- ‚ö° **limits**: Recommends resource limits for consistency\n\n**Sample Output:**\n\n```\n‚úñ services.web.image: image tag missing or ':latest' not allowed (no-latest)\n  Fix: pin to a specific tag, e.g. 'nginx:1.21'\n\n! services.database: consider setting CPU/memory limits (limits)\n  Fix: add 'resources: { cpus: \"1.0\", memory: \"512m\" }'\n```\n\n### Service Readiness (`nizam wait-for`)\n\nWait for services to become ready before proceeding with dependent operations.\n\n```bash\n# Wait for specific service\nnizam wait-for database\n\n# Wait for multiple services\nnizam wait-for web database cache\n\n# Wait for all services\nnizam wait-for\n\n# Custom timeout and check interval\nnizam wait-for --timeout 60s --interval 2s database\n```\n\n**Readiness Checks:**\n\n- üîå **Port connectivity** - TCP connection tests\n- üåê **HTTP health checks** - Endpoint availability\n- üê≥ **Container status** - Docker container state\n- ‚è±Ô∏è **Configurable timeouts** - Flexible waiting strategies\n\n### Retry Operations (`nizam retry`)\n\nRetry failed operations with intelligent exponential backoff.\n\n```bash\n# Retry start command with defaults\nnizam retry start\n\n# Custom retry attempts and delay\nnizam retry start --attempts 5 --delay 2s\n\n# Retry specific services\nnizam retry start web database --attempts 3\n```\n\n**Supported Operations:**\n\n- üöÄ `start` - Start services with retry\n- ‚èπÔ∏è `stop` - Stop services with retry\n- üîÑ `restart` - Restart services with retry\n- üì• `pull` - Pull images with retry\n- üèóÔ∏è `build` - Build images with retry\n\n**Retry Features:**\n\n- üìà Exponential backoff (1s ‚Üí 2s ‚Üí 4s ‚Üí 8s)\n- üéØ Configurable attempts and delays\n- üìä Progress reporting with attempt counters\n- üîÑ Graceful failure handling\n\n### Self-Update (`nizam update`)\n\nKeep nizam up-to-date with the latest features and fixes.\n\n```bash\n# Check for updates without installing\nnizam update --check\n\n# Update to latest stable version\nnizam update\n\n# Include prerelease versions\nnizam update --prerelease\n```\n\n**Update Features:**\n\n- üîç GitHub releases integration\n- üñ•Ô∏è Platform-specific binary detection\n- üîÑ Safe binary replacement with rollback\n- üöÄ Cross-platform support (Windows, macOS, Linux)\n- üì¶ Prerelease channel support\n\n### Shell Completion (`nizam completion`)\n\nGenerate completion scripts for faster command-line usage.\n\n```bash\n# Bash completion\nsource <(nizam completion bash)\n\n# Zsh completion\nsource <(nizam completion zsh)\n\n# Fish completion\nnizam completion fish | source\n\n# PowerShell completion\nnizam completion powershell | Out-String | Invoke-Expression\n```\n\n**Installation Examples:**\n\n```bash\n# Bash (add to ~/.bashrc)\necho 'source <(nizam completion bash)' >> ~/.bashrc\n\n# Zsh (add to ~/.zshrc)\necho 'source <(nizam completion zsh)' >> ~/.zshrc\n```\n\n### Development Workflow Integration\n\n**Pre-commit Checks:**\n\n```bash\n#!/bin/bash\n# .git/hooks/pre-commit\nnizam validate --strict && nizam lint && nizam doctor --json\n```\n\n**CI/CD Pipeline:**\n\n```yaml\n# .github/workflows/validate.yml\n- name: Validate nizam configuration\n  run: |\n    nizam doctor --json\n    nizam validate --strict\n    nizam lint --json\n```\n\n**Development Environment Setup:**\n\n```bash\n# Reliable environment startup\nnizam doctor                    # Check environment\nnizam validate                  # Validate config\nnizam retry start --attempts 3  # Start with retry\nnizam wait-for --timeout 60s    # Wait for readiness\n```\n\n**Production Deployment:**\n\n```bash\n# Production-ready checks\nnizam lint --json > lint-report.json\nnizam validate --strict --file production.yaml\nnizam doctor --fix\n```\n\n## Development Status\n\nüöß **This project is in active development**\n\n### Core Infrastructure ‚úÖ\n\n- [x] Project structure and modern Go standards\n- [x] Core CLI commands (`init`, `up`, `down`, `status`, `logs`, `exec`, `add`, `remove`)\n- [x] Docker integration with Compose support\n- [x] Configuration file parsing and validation\n- [x] Service definition system\n\n### Service Management ‚úÖ\n\n- [x] Service templates (16+ built-in templates)\n- [x] Interactive template variables (postgres, mysql, redis, mongodb, rabbitmq)\n- [x] Custom user templates (export, import, manage)\n- [x] Log streaming and real-time monitoring\n\n### Health & Monitoring ‚úÖ\n\n- [x] **Advanced Health Check System**: Comprehensive health monitoring with multiple interfaces\n  - [x] Health check engine with command, HTTP, and Docker status checks\n  - [x] CLI health commands (`nizam health`, `nizam health-server`)\n  - [x] HTTP server with REST API endpoints and web dashboard\n  - [x] Built-in health checks for common services (PostgreSQL, MySQL, Redis)\n  - [x] Health check history tracking and real-time monitoring\n  - [x] Multiple output formats (table, JSON, compact) and watch mode\n  - [x] Docker native healthcheck integration during container creation\n\n### Development & Operations Tools ‚úÖ\n\n- [x] **Environment Doctor** (`nizam doctor`): Comprehensive preflight checks\n  - [x] Docker daemon and Compose plugin verification\n  - [x] System resource checks (disk space, network MTU)\n  - [x] Dynamic port conflict detection\n  - [x] JSON output and automatic fix attempts\n  - [x] Concurrent check execution with semaphores\n- [x] **Configuration Validation** (`nizam validate`): Syntax and structure validation\n  - [x] YAML parsing with detailed error reporting\n  - [x] Service structure verification\n  - [x] Multiple output formats and strict mode\n- [x] **Configuration Linting** (`nizam lint`): Best practices enforcement\n  - [x] Extensible rule framework with severity levels\n  - [x] Built-in rules (no-latest, ports-shape, limits)\n  - [x] JSON output for CI/CD integration\n- [x] **Service Readiness** (`nizam wait-for`): Wait for service availability\n  - [x] Port connectivity and HTTP health check support\n  - [x] Configurable timeouts and check intervals\n  - [x] Multi-service waiting with progress reporting\n- [x] **Retry Operations** (`nizam retry`): Exponential backoff for failed operations\n  - [x] Support for all major operations (start, stop, restart, pull, build)\n  - [x] Configurable attempts and delay intervals\n  - [x] Progress reporting with attempt counters\n- [x] **Self-Update** (`nizam update`): Automatic updates from GitHub releases\n  - [x] Platform-specific binary detection and safe replacement\n  - [x] Version comparison and prerelease support\n  - [x] Cross-platform compatibility (Windows, macOS, Linux)\n- [x] **Shell Completion** (`nizam completion`): Multi-shell completion support\n  - [x] Bash, Zsh, Fish, and PowerShell support\n  - [x] Dynamic command and flag completion\n\n### Data Lifecycle Management ‚úÖ\n\n- [x] **Database Snapshots** (`nizam snapshot`): Complete snapshot lifecycle management\n  - [x] PostgreSQL, MySQL, Redis, and MongoDB snapshot engines with streaming dumps\n  - [x] Multi-compression support (zstd, gzip, none) with checksum verification\n  - [x] Rich manifest system with metadata, tags, and notes\n  - [x] Atomic operations with temporary files and safe renames\n  - [x] Organized storage in `.nizam/snapshots/<service>/` structure\n  - [x] Create, list, restore, and prune operations with comprehensive CLI\n- [x] **One-liner Database Access**: Smart database CLI tools\n  - [x] `nizam psql [service]` - Auto-resolved PostgreSQL connections\n  - [x] `nizam mysql [service]` - Auto-resolved MySQL connections\n  - [x] `nizam redis-cli [service]` - Auto-resolved Redis connections\n  - [x] `nizam mongosh [service]` - Auto-resolved MongoDB connections\n  - [x] Service auto-discovery and credential resolution from configuration\n  - [x] Host binary detection with container execution fallback\n  - [x] Pass-through argument support for native CLI tools\n\n### Documentation & Examples ‚úÖ\n\n- [x] Comprehensive README with feature documentation\n- [x] CLI commands documentation (`docs/COMMANDS.md`)\n- [x] Module-specific documentation (`internal/doctor/README.md`, `internal/lint/README.md`)\n- [x] Data lifecycle specification (`.docs/data-lifecycle.md`)\n- [x] Usage examples and integration patterns\n- [x] Complete unit test coverage with Makefile integration\n\n### Planned Data Lifecycle Features üîÑ\n\n- [x] **MySQL Snapshots & CLI**: MySQL database snapshot and one-liner access support ‚úÖ\n- [x] **MongoDB Snapshots & CLI**: MongoDB snapshot support and one-liner access ‚úÖ\n- [ ] **Seed Pack System**: Versioned, shareable dataset management\n  - [ ] Local seed pack registry with versioning\n  - [ ] Team/remote registry support (Git, URL-based)\n  - [ ] Seed pack creation from snapshots with data masking\n- [ ] **Safe Production Imports**: Data masking and sanitization\n  - [ ] Built-in masking profiles (minimal-pii, full-pii, payments-safe)\n  - [ ] Custom YAML-based masking rule definitions\n  - [ ] Deterministic faker for consistent data transformation\n- [ ] **Encryption Support**: Age-based snapshot encryption\n- [ ] **S3 Integration**: Remote snapshot storage and registries\n\n### Other Planned Features üîÑ\n\n- [ ] **Profile Management**: Multi-environment configuration support\n- [ ] **Network Management**: Custom Docker network creation and management\n- [ ] **Plugin System**: Extensible architecture for third-party integrations\n- [ ] **Performance Monitoring**: Resource usage tracking and optimization\n- [ ] **Secret Management**: Secure credential handling and rotation\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n",
      "order": 1,
      "category": "Overview"
    },
    {
      "slug": "docs-readme",
      "title": "Documentation Index",
      "content": "# Nizam Documentation\n\nWelcome to the comprehensive documentation for nizam, the Local Structured Service Manager for Development Environments.\n\n## üìö Documentation Overview\n\n### Getting Started\n\n- **[README](../README.md)** - Complete project overview, features, and quick start guide\n- **[Installation & Setup](../README.md#installation)** - How to install and configure nizam\n- **[Configuration Guide](../README.md#configuration)** - Setting up your `.nizam.yaml` file\n\n### Command Reference\n\n- **[CLI Commands Documentation](COMMANDS.md)** - Complete reference for all nizam commands\n  - Core operations (`up`, `down`, `status`, `logs`, `exec`)\n  - Configuration management (`init`, `validate`, `lint`, `add`, `remove`, `lint`, `templates`, `export`)\n  - Data lifecycle management (`snapshot`, `psql`, `mysql`, `redis-cli`, `mongosh`)\n  - Health & monitoring (`doctor`, `health`, `health-server`)\n  - Development tools (`wait-for`, `retry`, `completion`, `update`)\n\n### Interface Guides\n\n- **[Health Check System](../README.md#health-check-system-)** - Health monitoring and dashboard\n- **[Service Templates](../README.md#service-templates)** - Using and managing service templates\n- **[Data Lifecycle Management](DATA_LIFECYCLE.md)** - Database snapshots and one-liner access tools\n  - **[MongoDB Interface](MONGODB_SUPPORT.md)** - Describes MongoDB CLI and snapshot support implementation.\n\n### Technical Documentation\n\n#### Core Modules\n\n- **[Doctor Module](../internal/doctor/README.md)** - Environment checking and validation system\n\n  - Architecture and check implementation\n  - Adding custom checks and auto-fix support\n  - Performance considerations and configuration\n\n- **[Lint Module](../internal/lint/README.md)** - Configuration linting and best practices\n  - Rule framework and implementation patterns\n  - Adding custom linting rules\n  - CI/CD integration examples\n\n#### Implementation Details\n\n- **[Doctor Features Guide](DOCTOR.md)** - Complete doctor system documentation and usage\n- **[Development Status](../README.md#development-status)** - Current progress and planned features\n\n## üöÄ Quick Navigation\n\n### For New Users\n\n1. [Installation](../README.md#installation) - Get nizam installed\n2. [Quick Start](../README.md#quick-start) - Your first nizam project\n3. [Basic Commands](COMMANDS.md#core-operations) - Essential CLI commands\n\n### For Developers\n\n1. [Development Tools](../README.md#development--operations-tools-) - DevOps tooling overview\n2. [Doctor Module](../internal/doctor/README.md) - Environment validation\n3. [Lint System](../internal/lint/README.md) - Configuration best practices\n4. [CLI Reference](COMMANDS.md) - Complete command documentation\n\n### For Operations Teams\n\n1. [Health Monitoring](../README.md#health-check-system-) - Service health tracking\n2. [Environment Doctor](../README.md#environment-doctor-nizam-doctor) - Infrastructure validation\n3. [CI/CD Integration](COMMANDS.md#examples) - Automation examples\n4. [Production Patterns](../README.md#development-workflow-integration) - Best practices\n\n## üìñ Documentation Sections\n\n### Core Features\n\n- **Service Management** - Start, stop, and manage development services\n- **Template System** - Reusable service configurations with 16+ built-in templates\n- **Interactive Configuration** - Guided setup with validation and defaults\n- **Health Monitoring** - Multi-interface health checking with web dashboard\n\n### Development Tools\n\n- **Environment Doctor** - Comprehensive preflight environment validation\n- **Configuration Linting** - Best practices enforcement with extensible rules\n- **Service Readiness** - Wait for service availability with multiple check types\n- **Retry Operations** - Intelligent exponential backoff for failed operations\n- **Self-Update** - Automatic updates from GitHub releases\n- **Shell Completion** - Multi-shell completion support\n\n### Data Lifecycle Management\n\n- **Database Snapshots** - Point-in-time backup and restore for PostgreSQL, MySQL, MongoDB, and Redis\n- **One-liner Database Access** - Smart CLI tools with auto-resolved connections\n- **Compression & Integrity** - zstd/gzip compression with SHA256 verification\n- **Atomic Operations** - Safe creation and restoration with temporary files\n\n### Advanced Features\n\n- **Custom Templates** - Create and share your own service templates\n- **Profile Support** - Multiple environment configurations\n- **Docker Integration** - Native Docker Compose integration\n\n## üõ†Ô∏è Architecture\n\n<!-- ```\nnizam/\n‚îú‚îÄ‚îÄ cmd/                    # CLI commands implementation\n‚îú‚îÄ‚îÄ internal/\n‚îÇ   ‚îú‚îÄ‚îÄ compress/          # Compression utilities (zstd, gzip)\n‚îÇ   ‚îú‚îÄ‚îÄ config/            # Configuration parsing and validation\n‚îÇ   ‚îú‚îÄ‚îÄ docker/            # Docker client wrapper\n‚îÇ   ‚îú‚îÄ‚îÄ dockerx/           # Lightweight Docker execution\n‚îÇ   ‚îú‚îÄ‚îÄ doctor/            # Environment checking system\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md      # Doctor module documentation\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ checks/        # Individual check implementations\n‚îÇ   ‚îú‚îÄ‚îÄ lint/              # Configuration linting system\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ README.md      # Lint module documentation\n‚îÇ   ‚îú‚îÄ‚îÄ paths/             # Storage path management\n‚îÇ   ‚îú‚îÄ‚îÄ resolve/           # Service resolution and detection\n‚îÇ   ‚îú‚îÄ‚îÄ snapshot/          # Database snapshot engines\n‚îÇ   ‚îî‚îÄ‚îÄ version/           # Version management\n‚îú‚îÄ‚îÄ docs/\n‚îÇ   ‚îú‚îÄ‚îÄ README.md          # This documentation index\n‚îÇ   ‚îú‚îÄ‚îÄ COMMANDS.md        # Complete CLI reference\n‚îÇ   ‚îú‚îÄ‚îÄ DATA_LIFECYCLE.md  # Database snapshots & one-liners\n‚îÇ   ‚îú‚îÄ‚îÄ MONGODB_SUPPORT.md # MongoDB snapshot & one-liner implementation\n‚îÇ   ‚îî‚îÄ‚îÄ DOCTOR.md          # Doctor features documentation\n‚îî‚îÄ‚îÄ README.md              # Main project documentation\n``` -->\n\n<pre>\n<span style=\"color:#6af\">nizam/</span>\n‚îú‚îÄ‚îÄ <span style=\"color:#6af\">cmd/</span>                    <span style=\"color:#888\"># CLI commands implementation</span>\n‚îú‚îÄ‚îÄ <span style=\"color:#6af\">internal/</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">compress/</span>          <span style=\"color:#888\"># Compression utilities (zstd, gzip)</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">config/</span>            <span style=\"color:#888\"># Configuration parsing and validation</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">docker/</span>            <span style=\"color:#888\"># Docker client wrapper</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">dockerx/</span>           <span style=\"color:#888\"># Lightweight Docker execution</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">doctor/</span>            <span style=\"color:#888\"># Environment checking system</span>\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#f9f\">README.md</span>      <span style=\"color:#888\"># Doctor module documentation</span>\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ <span style=\"color:#6af\">checks/</span>        <span style=\"color:#888\"># Individual check implementations</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">lint/</span>              <span style=\"color:#888\"># Configuration linting system</span>\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ <span style=\"color:#f9f\">README.md</span>      <span style=\"color:#888\"># Lint module documentation</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">paths/</span>             <span style=\"color:#888\"># Storage path management</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">resolve/</span>           <span style=\"color:#888\"># Service resolution and detection</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#6af\">snapshot/</span>          <span style=\"color:#888\"># Database snapshot engines</span>\n‚îÇ   ‚îî‚îÄ‚îÄ <span style=\"color:#6af\">version/</span>           <span style=\"color:#888\"># Version management</span>\n‚îú‚îÄ‚îÄ <span style=\"color:#6af\">docs/</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#f9f\">README.md</span>          <span style=\"color:#888\"># This documentation index</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#f9f\">COMMANDS.md</span>        <span style=\"color:#888\"># Complete CLI reference</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#f9f\">DATA_LIFECYCLE.md</span>  <span style=\"color:#888\"># Database snapshots &amp; one-liners</span>\n‚îÇ   ‚îú‚îÄ‚îÄ <span style=\"color:#f9f\">MONGODB_SUPPORT.md</span> <span style=\"color:#888\"># MongoDB snapshot &amp; one-liner implementation</span>\n‚îÇ   ‚îî‚îÄ‚îÄ <span style=\"color:#f9f\">DOCTOR.md</span>          <span style=\"color:#888\"># Doctor features documentation</span>\n‚îî‚îÄ‚îÄ <span style=\"color:#f9f\">README.md</span>              <span style=\"color:#888\"># Main project documentation</span>\n</pre>\n\n## ü§ù Contributing to Documentation\n\nContributions are welcome to improve nizam's documentation! Here's how you can help:\n\n### Documentation Types\n\n- **User Guides** - Help users understand and use features\n- **API Documentation** - Technical reference for developers\n- **Examples** - Real-world usage patterns and integrations\n- **Troubleshooting** - Common issues and solutions\n\n### Documentation Standards\n\n- **Clear Examples** - Include working code examples\n- **Complete Context** - Provide necessary background information\n- **Update Status** - Keep implementation status current\n- **Cross-References** - Link to related documentation\n\n### File Conventions\n\n- **README.md files** - Overview and getting started information\n- **Module READMEs** - Technical implementation details\n- **COMMANDS.md** - Complete CLI reference\n- **Integration examples** - Real-world usage patterns\n\n## üìû Support\n\n- **Issues** - Report bugs and request features on [Github](https://github.com/abdultolba/nizam/issues/new)\n- **Discussions** - Ask questions and share ideas\n- **Examples** - Check documentation for usage patterns\n- **Contributing** - See the main [README](../README.md) for contribution guidelines\n\n---\n\n_This documentation is actively maintained and updated with each release. For the most current information, always refer to the latest version._\n",
      "order": 2,
      "category": "Documentation"
    },
    {
      "slug": "docs-commands",
      "title": "Nizam CLI Commands Documentation",
      "content": "# Nizam CLI Commands Documentation\n\nThis document provides comprehensive documentation for all nizam CLI commands, organized by category.\n\n## Table of Contents\n- [Core Operations](#core-operations)\n- [Configuration Management](#configuration-management) \n- [Data Lifecycle Management](#data-lifecycle-management)\n- [Health & Monitoring](#health--monitoring)\n- [Development Tools](#development-tools)\n- [Utility Commands](#utility-commands)\n\n## Core Operations\n\n### `nizam up`\nStart one or more services defined in your configuration.\n\n```bash\n# Start all services\nnizam up\n\n# Start specific services\nnizam up postgres redis\n```\n\n### `nizam down`\nStop all running nizam services and clean up resources.\n\n```bash\n# Stop all services\nnizam down\n```\n\n### `nizam status`\nShow the current status of all configured services.\n\n```bash\n# Show status of all services\nnizam status\n```\n\n### `nizam logs`\nDisplay logs from running services.\n\n```bash\n# Show logs for a specific service\nnizam logs postgres\n\n# Follow logs in real-time\nnizam logs --follow postgres\n\n# Show last 100 lines\nnizam logs --tail 100 postgres\n```\n\n**Options:**\n- `--follow, -f` - Follow log output in real-time\n- `--tail N` - Show last N lines of logs (default: 50)\n\n### `nizam exec`\nExecute commands inside running service containers.\n\n```bash\n# Open interactive shell\nnizam exec postgres bash\n\n# Run single command\nnizam exec postgres psql -U user -d myapp\n```\n\n## Configuration Management\n\n### `nizam init`\nInitialize a new nizam configuration file in the current directory.\n\n```bash\n# Create default configuration\nnizam init\n\n# Initialize with custom services\nnizam init --add postgres,mysql,redis\n```\n\n**Options:**\n- `--add SERVICES` - Comma-separated list of services to add instead of defaults\n\n### `nizam validate`\nValidate configuration file syntax and structure.\n\n```bash\n# Validate default config\nnizam validate\n\n# Validate specific file\nnizam validate --file ./production.yaml\n\n# JSON output for automation\nnizam validate --json\n\n# Strict mode (exit non-zero on any issues)\nnizam validate --strict\n```\n\n**Options:**\n- `--file FILE` - Specify configuration file to validate\n- `--json` - Output results in JSON format\n- `--strict` - Exit with non-zero code on validation failures\n\n### `nizam lint`\nAnalyze configuration for best practices and potential issues.\n\n```bash\n# Lint default configuration\nnizam lint\n\n# Lint specific file\nnizam lint --file ./config.yaml\n\n# JSON output for CI/CD\nnizam lint --json\n```\n\n**Options:**\n- `--file FILE` - Configuration file to analyze\n- `--json` - Output results in JSON format\n\n**Rules Checked:**\n- **no-latest**: Prevents usage of `:latest` image tags\n- **ports-shape**: Validates port mapping format\n- **limits**: Recommends resource limits for services\n\n### `nizam add`\nAdd a service from a template to your configuration.\n\n```bash\n# Add service with interactive configuration\nnizam add postgres\n\n# Add service with default values\nnizam add postgres --defaults\n\n# Add service with custom name\nnizam add redis --name cache\n```\n\n**Options:**\n- `--defaults` - Skip interactive prompts and use default values\n- `--name NAME` - Custom name for the service (default: template name)\n- `--overwrite` - Overwrite existing service with the same name\n\n### `nizam remove`\nRemove services from your configuration.\n\n```bash\n# Remove a service\nnizam remove postgres\n\n# Remove multiple services\nnizam remove postgres redis\n\n# Remove with confirmation\nnizam remove --confirm postgres\n```\n\n**Options:**\n- `--confirm` - Require confirmation before removal\n\n## Data Lifecycle Management\n\n### `nizam snapshot`\nManage database snapshots for backup, testing, and data sharing.\n\n#### `nizam snapshot create <service>`\nCreate a snapshot of a service database.\n\n```bash\n# Basic snapshot creation\nnizam snapshot create postgres\nnizam snapshot create redis\n\n# With custom options\nnizam snapshot create postgres --tag \"v1.2.0\" --compress zstd --note \"Release snapshot\"\n```\n\n**Options:**\n- `--compress string` - Compression type: `zstd` (default), `gzip`, `none`\n- `--note string` - Note/description for the snapshot\n- `--tag string` - Tag for the snapshot (default: timestamp)\n\n#### `nizam snapshot list [service]`\nList snapshots for a specific service or all services.\n\n```bash\n# List all snapshots across all services\nnizam snapshot list\n\n# List snapshots for specific service\nnizam snapshot list postgres\n\n# JSON output for automation\nnizam snapshot list --json\n```\n\n**Options:**\n- `--json` - Output in JSON format\n\n#### `nizam snapshot restore <service>`\nRestore a snapshot for a service.\n\n```bash\n# Restore latest snapshot\nnizam snapshot restore postgres --latest\n\n# Restore specific tagged snapshot\nnizam snapshot restore postgres --tag \"before-migration\"\n\n# Force restore without confirmation\nnizam snapshot restore postgres --latest --force\n```\n\n**Options:**\n- `--force` - Skip confirmation prompts\n- `--latest` - Restore the most recent snapshot\n- `--tag string` - Restore snapshot with specific tag\n\n#### `nizam snapshot prune <service>`\nRemove old snapshots, keeping the N most recent.\n\n```bash\n# Remove old snapshots, keeping 3 most recent\nnizam snapshot prune postgres --keep 3\n\n# Dry run to see what would be deleted\nnizam snapshot prune postgres --keep 5 --dry-run\n```\n\n**Options:**\n- `--dry-run` - Show what would be deleted without actually deleting\n- `--keep int` - Number of snapshots to keep (required)\n\n### `nizam psql`\nConnect to PostgreSQL services with auto-resolved credentials.\n\n```bash\n# Connect to first/default PostgreSQL service\nnizam psql\n\n# Connect to specific service\nnizam psql postgres\nnizam psql api-db\n\n# Override connection parameters\nnizam psql --user admin --db production\n\n# Pass arguments to psql\nnizam psql -- --help\nnizam psql -- -c \"SELECT version()\"\nnizam psql postgres -- -c \"\\\\l\"\n```\n\n**Options:**\n- `--db string` - Database name (override config)\n- `--user string` - Username (override config)\n\n**Key Difference from `nizam exec`:**\n- `nizam psql` auto-resolves credentials and builds connection strings\n- `nizam exec postgres psql` requires manual specification of all connection details\n\n### `nizam mysql`\nConnect to MySQL services with auto-resolved credentials.\n\n```bash\n# Connect to first/default MySQL service\nnizam mysql\n\n# Connect to specific service\nnizam mysql mysql\nnizam mysql api-db\n\n# Override connection parameters\nnizam mysql --user root --db mysql\n\n# Pass arguments to mysql client\nnizam mysql -- --help\nnizam mysql -- -e \"SHOW DATABASES\"\nnizam mysql api-db -- -e \"SELECT version()\"\n```\n\n**Options:**\n- `--db string` - Database name (override config)\n- `--user string` - Username (override config)\n\n**Key Features:**\n- Auto-discovers MySQL services from configuration\n- Extracts credentials from environment variables (MYSQL_USER, MYSQL_PASSWORD, etc.)\n- Uses host binaries when available, falls back to container execution\n- Supports both MySQL and MariaDB containers\n- Supports pass-through arguments after `--`\n\n### `nizam redis-cli`\nConnect to Redis services with auto-configuration.\n\n```bash\n# Connect to first/default Redis service\nnizam redis-cli\n\n# Connect to specific service\nnizam redis-cli redis\nnizam redis-cli cache\n\n# Pass arguments to redis-cli\nnizam redis-cli -- --help\nnizam redis-cli -- ping\nnizam redis-cli cache -- info server\n```\n\n**Key Features:**\n- Auto-discovers Redis services from configuration\n- Extracts authentication details automatically\n- Uses host binaries when available, falls back to container execution\n- Supports pass-through arguments after `--`\n\n## Health & Monitoring\n\n### `nizam doctor`\nRun comprehensive preflight checks on your Docker environment.\n\n```bash\n# Run all checks\nnizam doctor\n\n# Skip specific checks\nnizam doctor --skip net.mtu,disk.free\n\n# JSON output for automation\nnizam doctor --json\n\n# Attempt automatic fixes\nnizam doctor --fix\n\n# Verbose output\nnizam doctor --verbose\n```\n\n**Options:**\n- `--skip CHECKS` - Comma-separated list of check IDs to skip\n- `--json` - Output results in JSON format\n- `--fix` - Attempt automatic fixes for supported issues\n- `--verbose` - Show detailed check information\n\n**Checks Performed:**\n- `docker.daemon` - Docker daemon connectivity\n- `docker.compose` - Docker Compose availability\n- `disk.free` - Available disk space\n- `net.mtu` - Network MTU configuration\n- `port.{PORT}` - Port availability for each service\n\n### `nizam health`\nCheck health status of running services.\n\n```bash\n# Check all services\nnizam health\n\n# Check specific service\nnizam health postgres\n\n# Wait for services to become healthy\nnizam health --wait\n\n# JSON output\nnizam health --json\n```\n\n**Options:**\n- `--wait` - Wait for services to become healthy\n- `--timeout DURATION` - Maximum wait time (default: 30s)\n- `--json` - Output status in JSON format\n\n### `nizam health-server`\nStart HTTP health check server for monitoring integration.\n\n```bash\n# Start on default port (8080)\nnizam health-server\n\n# Start on custom port\nnizam health-server --port 9090\n\n# Enable metrics endpoint\nnizam health-server --metrics\n```\n\n**Options:**\n- `--port PORT` - HTTP server port (default: 8080)\n- `--metrics` - Enable Prometheus metrics endpoint\n\n**Endpoints:**\n- `/health` - Overall health status\n- `/health/{service}` - Individual service health\n- `/metrics` - Prometheus metrics (if enabled)\n\n## Development Tools\n\n### `nizam wait-for`\nWait for services to become ready before proceeding.\n\n```bash\n# Wait for specific service\nnizam wait-for database\n\n# Wait for multiple services\nnizam wait-for web database cache\n\n# Wait for all services\nnizam wait-for\n\n# Custom timeout\nnizam wait-for --timeout 60s database\n\n# Custom check interval\nnizam wait-for --interval 2s database\n```\n\n**Aliases:** `nizam wait`\n\n**Options:**\n- `--timeout DURATION` - Maximum wait time (default: 30s)\n- `--interval DURATION` - Check interval (default: 1s)\n\n**Readiness Checks:**\n- Port connectivity for services with exposed ports\n- HTTP health checks for services with health check URLs\n- Assumes ready if no checks are configured\n\n### `nizam retry`\nRetry failed operations with exponential backoff.\n\n```bash\n# Retry start command\nnizam retry start\n\n# Retry with custom attempts\nnizam retry start --attempts 5\n\n# Custom initial delay\nnizam retry start --delay 2s\n\n# Retry specific services\nnizam retry start web database --attempts 3\n```\n\n**Options:**\n- `--attempts N` - Maximum retry attempts (default: 3)\n- `--delay DURATION` - Initial delay between retries (default: 1s)\n\n**Supported Operations:**\n- `start` - Start services\n- `stop` - Stop services  \n- `restart` - Restart services\n- `pull` - Pull images\n- `build` - Build images\n\n## Utility Commands\n\n### `nizam completion`\nGenerate shell completion scripts.\n\n```bash\n# Bash completion\nsource <(nizam completion bash)\n\n# Zsh completion\nsource <(nizam completion zsh)\n\n# Fish completion\nnizam completion fish | source\n\n# PowerShell completion\nnizam completion powershell | Out-String | Invoke-Expression\n```\n\n**Supported Shells:**\n- bash\n- zsh\n- fish\n- powershell\n\n**Installation:**\n```bash\n# Bash (add to ~/.bashrc)\necho 'source <(nizam completion bash)' >> ~/.bashrc\n\n# Zsh (add to ~/.zshrc)\necho 'source <(nizam completion zsh)' >> ~/.zshrc\n```\n\n### `nizam update`\nUpdate nizam to the latest version.\n\n```bash\n# Check for updates\nnizam update --check\n\n# Update to latest version\nnizam update\n\n# Include prerelease versions\nnizam update --prerelease\n```\n\n**Options:**\n- `--check` - Only check for updates, don't install\n- `--prerelease` - Include prerelease versions\n\n### `nizam templates`\nList available service templates.\n\n```bash\n# Show all templates\nnizam templates\n\n# Show template details\nnizam templates --details\n\n# Filter by category\nnizam templates --category database\n```\n\n**Options:**\n- `--details` - Show detailed template information\n- `--category CATEGORY` - Filter by template category\n\n### `nizam custom`\nManage custom service templates.\n\n```bash\n# List custom templates\nnizam custom list\n\n# Create custom template\nnizam custom create mytemplate\n\n# Import template from file\nnizam custom import ./template.yaml\n\n# Export template\nnizam custom export mytemplate > template.yaml\n```\n\n**Subcommands:**\n- `list` - List custom templates\n- `create NAME` - Create new custom template\n- `import FILE` - Import template from file\n- `export NAME` - Export template to stdout\n\n### `nizam export`\nExport service configuration as a custom template.\n\n```bash\n# Export service as template\nnizam export postgres mypostgres\n\n# Export with description\nnizam export postgres mypostgres --description \"Custom Postgres setup\"\n```\n\n**Options:**\n- `--description TEXT` - Template description\n\n## Global Options\n\nAll commands support these global options:\n\n- `--config FILE` - Configuration file path (default: .nizam.yaml)\n- `--profile PROFILE` - Configuration profile to use (default: dev)\n- `--verbose, -v` - Enable verbose logging\n- `--help, -h` - Show help information\n- `--version` - Show version information\n\n## Exit Codes\n\nStandard exit codes used by nizam commands:\n\n- `0` - Success\n- `1` - General error\n- `2` - Invalid arguments\n- `3` - Configuration error\n- `4` - Docker/system error\n\n## Environment Variables\n\n- `NIZAM_CONFIG` - Override default configuration file path\n- `NIZAM_PROFILE` - Override default profile\n- `NIZAM_VERBOSE` - Enable verbose logging (true/false)\n- `NIZAM_DOCTOR_TIMEOUT` - Override doctor check timeout\n- `NIZAM_DOCTOR_CONCURRENCY` - Override doctor concurrency limit\n\n## Examples\n\n### Development Workflow\n```bash\n# Initialize new project\nnizam init\n\n# Add required services\nnizam add postgres redis\n\n# Start development environment\nnizam up\n\n# Check everything is working\nnizam doctor\nnizam health\n\n# View service logs\nnizam logs --follow postgres\n\n# Clean up\nnizam down\n```\n\n### CI/CD Integration\n```bash\n# Validate configuration\nnizam validate --json --strict\n\n# Lint for best practices\nnizam lint --json\n\n# Environment check\nnizam doctor --json\n\n# Start services for testing\nnizam up\n\n# Wait for services to be ready\nnizam wait-for --timeout 60s\n\n# Run tests...\n\n# Clean up\nnizam down --force\n```\n\n### Production Health Monitoring\n```bash\n# Start health server\nnizam health-server --port 8080 --metrics &\n\n# Check service health\ncurl http://localhost:8080/health\n\n# Get metrics\ncurl http://localhost:8080/metrics\n```\n",
      "order": 3,
      "category": "Reference"
    },
    {
      "slug": "docs-data_lifecycle",
      "title": "Data Lifecycle Management",
      "content": "# Data Lifecycle Management\n\nnizam provides comprehensive data lifecycle tools for database snapshots and one-liner database access, making it easy to capture, restore, and work with database states during development.\n\n## Table of Contents\n\n- [Database Snapshots](#database-snapshots)\n- [One-liner Database Access](#one-liner-database-access)\n- [Architecture & Implementation](#architecture--implementation)\n- [Use Cases & Workflows](#use-cases--workflows)\n- [Troubleshooting](#troubleshooting)\n\n## Database Snapshots\n\nCreate point-in-time snapshots of your databases for backup, testing, or sharing data states.\n\n### Features\n\n- üéØ **Multi-engine support**: PostgreSQL, MySQL, and Redis (MongoDB planned)\n- üóúÔ∏è **Smart compression**: zstd (default), gzip, or none with automatic streaming\n- üîí **Data integrity**: SHA256 checksums for all snapshot files\n- üìã **Rich metadata**: Tagged snapshots with notes, timestamps, and version tracking\n- üìÅ **Organized storage**: Structured storage in `.nizam/snapshots/<service>/`\n- ‚ö° **Atomic operations**: Safe creation and restoration with temporary files\n\n### Quick Start\n\n```bash\n# Create a basic snapshot\nnizam snapshot create postgres\n\n# Create a tagged snapshot with notes\nnizam snapshot create postgres --tag \"before-migration\" --note \"Pre-schema update\"\n\n# List all snapshots\nnizam snapshot list\n\n# Restore the latest snapshot\nnizam snapshot restore postgres --latest\n\n# Clean up old snapshots\nnizam snapshot prune postgres --keep 5\n```\n\n### Commands Reference\n\n#### `nizam snapshot create <service>`\n\nCreate a snapshot of a service database.\n\n```bash\n# Basic usage\nnizam snapshot create postgres\nnizam snapshot create mysql\nnizam snapshot create redis\n\n# With options\nnizam snapshot create postgres \\\n  --tag \"v1.2.0\" \\\n  --compress zstd \\\n  --note \"Release snapshot\"\n```\n\n**Flags:**\n\n- `--compress string` - Compression type: `zstd` (default), `gzip`, `none`\n- `--note string` - Note/description for the snapshot\n- `--tag string` - Tag for the snapshot (default: timestamp)\n\n**Output:**\n\n```\n‚úì Created snapshot for postgres\n  Location: .nizam/snapshots/postgres/20240810-143022-v1.2.0/\n  Files: pg.dump.zst (15.2MB)\n  Checksum: sha256:a1b2c3d4...\n```\n\n#### `nizam snapshot list [service]`\n\nList snapshots for a specific service or all services.\n\n```bash\n# List all snapshots\nnizam snapshot list\n\n# List for specific service\nnizam snapshot list postgres\n\n# JSON output for automation\nnizam snapshot list --json\n```\n\n**Flags:**\n\n- `--json` - Output in JSON format\n\n**Output (table format):**\n\n```\nSERVICE   TAG              CREATED              SIZE    NOTE\npostgres  before-migration 2024-08-10 14:30:22  15.2MB  Pre-schema update\npostgres  v1.1.0          2024-08-09 09:15:33  14.8MB\nredis     cache-backup     2024-08-10 12:45:11   2.1MB  Daily backup\n```\n\n**Output (JSON format):**\n\n```json\n{\n  \"snapshots\": [\n    {\n      \"service\": \"postgres\",\n      \"tag\": \"before-migration\",\n      \"createdAt\": \"2024-08-10T14:30:22Z\",\n      \"size\": 15943680,\n      \"note\": \"Pre-schema update\",\n      \"path\": \".nizam/snapshots/postgres/20240810-143022-before-migration/\",\n      \"engine\": \"postgresql\",\n      \"compression\": \"zstd\"\n    }\n  ]\n}\n```\n\n#### `nizam snapshot restore <service>`\n\nRestore a snapshot for a service.\n\n```bash\n# Restore latest snapshot\nnizam snapshot restore postgres --latest\n\n# Restore specific tagged snapshot\nnizam snapshot restore postgres --tag \"before-migration\"\n\n# Force restore without confirmation\nnizam snapshot restore postgres --latest --force\n```\n\n**Flags:**\n\n- `--force` - Skip confirmation prompts\n- `--latest` - Restore the most recent snapshot\n- `--tag string` - Restore snapshot with specific tag\n\n**Confirmation prompt:**\n\n```\n‚ö†Ô∏è  This will replace all data in the postgres database.\n   Service: postgres\n   Snapshot: before-migration (2024-08-10 14:30:22)\n   Size: 15.2MB\n\nContinue? [y/N]:\n```\n\n#### `nizam snapshot prune <service>`\n\nRemove old snapshots, keeping the N most recent.\n\n```bash\n# Keep 3 most recent snapshots\nnizam snapshot prune postgres --keep 3\n\n# Dry run to preview what would be deleted\nnizam snapshot prune postgres --keep 3 --dry-run\n```\n\n**Flags:**\n\n- `--dry-run` - Show what would be deleted without deleting\n- `--keep int` - Number of snapshots to keep (required)\n\n**Dry run output:**\n\n```\nWould remove 2 snapshots for postgres (reclaim 28.7MB):\n  ‚úó v1.0.0 (2024-08-05 16:22:11) - 14.1MB\n  ‚úó initial (2024-08-03 10:15:44) - 14.6MB\n\nKeeping 3 most recent snapshots:\n  ‚úì before-migration (2024-08-10 14:30:22) - 15.2MB\n  ‚úì v1.1.0 (2024-08-09 09:15:33) - 14.8MB\n  ‚úì staging-data (2024-08-08 11:45:20) - 13.9MB\n```\n\n### Storage Structure\n\nSnapshots are organized in a predictable directory structure:\n\n```\n.nizam/snapshots/\n‚îú‚îÄ‚îÄ postgres/\n‚îÇ   ‚îú‚îÄ‚îÄ 20240810-143022-before-migration/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pg.dump.zst\n‚îÇ   ‚îú‚îÄ‚îÄ 20240809-091533-v1.1.0/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pg.dump.zst\n‚îÇ   ‚îî‚îÄ‚îÄ 20240808-114520-staging-data/\n‚îÇ       ‚îú‚îÄ‚îÄ manifest.json\n‚îÇ       ‚îî‚îÄ‚îÄ pg.dump.zst\n‚îî‚îÄ‚îÄ redis/\n    ‚îî‚îÄ‚îÄ 20240810-124511-cache-backup/\n        ‚îú‚îÄ‚îÄ manifest.json\n        ‚îî‚îÄ‚îÄ dump.rdb.gz\n```\n\n### Manifest Format\n\nEach snapshot includes a `manifest.json` file with metadata:\n\n```json\n{\n  \"service\": \"postgres\",\n  \"engine\": \"postgresql\",\n  \"image\": \"postgres:16.3\",\n  \"createdAt\": \"2024-08-10T14:30:22Z\",\n  \"tag\": \"before-migration\",\n  \"toolVersion\": \"0.7.0\",\n  \"compression\": \"zstd\",\n  \"encryption\": \"none\",\n  \"note\": \"Pre-schema update\",\n  \"files\": [\n    {\n      \"name\": \"pg.dump.zst\",\n      \"sha256\": \"a1b2c3d4e5f6789012345678901234567890abcdef\",\n      \"size\": 15943680\n    }\n  ]\n}\n```\n\n## One-liner Database Access\n\nConnect to your databases instantly with auto-resolved connection parameters.\n\n### Features\n\n- üîß **Auto-resolution**: Automatically discovers connection details from configuration\n- üîÑ **Smart fallback**: Uses host binaries when available, falls back to container execution\n- üéØ **Service detection**: Auto-detects the first service of each type if not specified\n- üìã **Pass-through args**: All arguments after `--` are passed directly to the database CLI\n\n### PostgreSQL Access\n\n#### `nizam psql [service]`\n\nConnect to PostgreSQL services with auto-resolved credentials.\n\n```bash\n# Connect to first/default PostgreSQL service\nnizam psql\n\n# Connect to specific service\nnizam psql postgres\nnizam psql api-db\n\n# Override connection parameters\nnizam psql --user admin --db production\n\n# Pass arguments to psql\nnizam psql -- --help\nnizam psql -- -c \"SELECT version()\"\nnizam psql postgres -- -c \"\\\\l\"\n```\n\n**Flags:**\n\n- `--db string` - Database name (override config)\n- `--user string` - Username (override config)\n\n**Connection Resolution Example:**\n\nGiven this configuration:\n\n```yaml\nservices:\n  postgres:\n    image: postgres:16\n    ports: [\"5432:5432\"]\n    env:\n      POSTGRES_USER: myuser\n      POSTGRES_PASSWORD: mypass\n      POSTGRES_DB: mydb\n```\n\nThe command `nizam psql` resolves to:\n\n```bash\n# If psql available on host:\npsql \"postgresql://myuser:mypass@localhost:5432/mydb?sslmode=disable\"\n\n# If psql not available on host:\ndocker exec -it nizam_postgres psql -U myuser -d mydb\n```\n\n### MySQL Access\n\n#### `nizam mysql [service]`\n\nConnect to MySQL services with auto-resolved credentials.\n\n```bash\n# Connect to first/default MySQL service\nnizam mysql\n\n# Connect to specific service\nnizam mysql mysql\nnizam mysql api-db\n\n# Override connection parameters\nnizam mysql --user root --db mysql\n\n# Pass arguments to mysql client\nnizam mysql -- --help\nnizam mysql -- -e \"SHOW DATABASES\"\nnizam mysql api-db -- -e \"SELECT version()\"\n```\n\n**Flags:**\n\n- `--db string` - Database name (override config)\n- `--user string` - Username (override config)\n\n**Connection Resolution Example:**\n\nGiven this configuration:\n\n```yaml\nservices:\n  mysql:\n    image: mysql:8.0\n    ports: [\"3306:3306\"]\n    env:\n      MYSQL_USER: myuser\n      MYSQL_PASSWORD: mypass\n      MYSQL_DATABASE: mydb\n```\n\nThe command `nizam mysql` resolves to:\n\n```bash\n# If mysql available on host:\nmysql -h localhost -P 3306 -u myuser -pmypass mydb\n\n# If mysql not available on host:\ndocker exec -it nizam_mysql mysql -u myuser -h localhost -pmypass mydb\n```\n\n### Redis Access\n\n#### `nizam redis-cli [service]`\n\nConnect to Redis services with auto-configuration.\n\n```bash\n# Connect to first/default Redis service\nnizam redis-cli\n\n# Connect to specific service\nnizam redis-cli redis\nnizam redis-cli cache\n\n# Pass arguments to redis-cli\nnizam redis-cli -- --help\nnizam redis-cli -- ping\nnizam redis-cli cache -- info server\n```\n\n**Connection Resolution Example:**\n\nGiven this configuration:\n\n```yaml\nservices:\n  redis:\n    image: redis:7\n    ports: [\"6379:6379\"]\n    env:\n      REDIS_PASSWORD: mypassword\n```\n\nThe command `nizam redis-cli` resolves to:\n\n```bash\n# If redis-cli available on host:\nredis-cli -h localhost -p 6379 -a mypassword\n\n# If redis-cli not available on host:\ndocker exec -it nizam_redis redis-cli -a mypassword\n```\n\n### Smart vs Raw Execution\n\nUnderstanding the difference between smart connection commands and raw container execution:\n\n| Feature                   | `nizam psql`                     | `nizam exec postgres psql`         |\n| ------------------------- | -------------------------------- | ---------------------------------- |\n| **Credential resolution** | ‚úÖ Automatic from config         | ‚ùå Manual specification required   |\n| **Connection strings**    | ‚úÖ Auto-built URLs               | ‚ùå Manual argument construction    |\n| **Host binary usage**     | ‚úÖ Uses host `psql` if available | ‚ùå Always executes in container    |\n| **Service discovery**     | ‚úÖ Auto-finds PostgreSQL service | ‚ùå Must specify exact service name |\n| **Ease of use**           | üü¢ Just works                    | üü° Requires connection knowledge   |\n| **Flexibility**           | üü° Opinionated                   | üü¢ Total control                   |\n\n**Smart Connection Examples:**\n\n```bash\nnizam psql                           # Auto-connects\nnizam psql -- -c \"SELECT version()\"  # Runs query automatically\nnizam mysql                          # Auto-connects to MySQL\nnizam mysql -- -e \"SHOW DATABASES\"   # Runs MySQL query automatically\nnizam redis-cli -- ping             # Auto-authenticated ping\n```\n\n**Raw Container Execution Examples:**\n\n```bash\nnizam exec postgres psql -U user -d mydb -h localhost\nnizam exec mysql mysql -u user -pmypass mydb\nnizam exec redis redis-cli -a password ping\n```\n\n## Architecture & Implementation\n\n### Snapshot Engines\n\nnizam uses engine-specific implementations for different database types:\n\n#### PostgreSQL Engine\n\n- Uses `pg_dump --format=custom` for consistent binary dumps\n- Streams output directly to compressed files\n- Restores using `pg_restore --clean --if-exists`\n- Handles connection parameters from service environment\n\n#### MySQL Engine\n\n- Uses `mysqldump` with comprehensive options for consistent dumps\n- Includes routines, triggers, events, and complete inserts\n- Restores using `mysql` client with streaming support\n- Handles connection parameters from service environment variables\n- Supports both MySQL and MariaDB containers\n\n#### Redis Engine\n\n- Uses `BGSAVE` command for consistent point-in-time snapshots\n- Copies `dump.rdb` file from container data directory\n- Restores by stopping container, replacing file, and restarting\n- Preserves Redis configuration and persistence settings\n\n### Compression Pipeline\n\nSnapshots use a streaming compression pipeline:\n\n```\nDatabase Engine ‚Üí Compressor ‚Üí Checksum ‚Üí Atomic Write\n    (pg_dump)       (zstd)      (sha256)    (temp + rename)\n```\n\n**Compression Options:**\n\n- **zstd** (default): Best compression ratio and speed balance\n- **gzip**: Wide compatibility, moderate compression\n- **none**: No compression, fastest for small datasets\n\n### Connection Resolution\n\nOne-liner commands follow a resolution chain:\n\n```\n1. Parse command arguments (service, overrides)\n2. Load .nizam.yaml configuration\n3. Find matching service by type\n4. Extract connection details from environment\n5. Check for host binary availability\n6. Build connection string or container command\n7. Execute with appropriate method\n```\n\n**Service Discovery Logic:**\n\n```go\n// Pseudo-code for service discovery\nfunc FindDatabaseService(config, serviceType) Service {\n    if serviceName := args.ServiceName; serviceName != \"\" {\n        return config.Services[serviceName]\n    }\n\n    // Auto-discover first service of matching type\n    for name, service := range config.Services {\n        if DetectEngine(service) == serviceType {\n            return service\n        }\n    }\n\n    return error(\"No PostgreSQL/Redis service found\")\n}\n```\n\n### Security Considerations\n\n- **Credential Handling**: Passwords never logged in plain text\n- **Container Isolation**: Database operations run in isolated containers\n- **File Permissions**: Snapshot files created with 644 permissions\n- **Checksum Verification**: All snapshots verified on creation and restore\n- **Atomic Operations**: Temporary files prevent partial state corruption\n\n## Use Cases & Workflows\n\n### Development Workflow\n\n**Database State Management:**\n\n```bash\n# Save current state before major changes\nnizam snapshot create postgres --tag \"before-schema-migration\"\n\n# Make schema changes...\n\n# If something goes wrong, restore\nnizam snapshot restore postgres --tag \"before-schema-migration\"\n\n# Regular development database access\nnizam psql -- -c \"\\\\dt\"\nnizam redis-cli -- keys \"*user*\"\n```\n\n**Feature Branch Development:**\n\n```bash\n# Create feature snapshot\nnizam snapshot create postgres --tag \"feature-auth\"\n\n# Switch to different feature\nnizam snapshot restore postgres --tag \"feature-payments\"\n\n# Quick database exploration\nnizam psql postgres -- -c \"SELECT * FROM users LIMIT 5\"\n```\n\n### Testing & QA\n\n**Test Data Setup:**\n\n```bash\n# Create test data snapshot\nnizam snapshot create postgres --tag \"test-suite-data\" --note \"Complete test dataset\"\n\n# Before each test run\nnizam snapshot restore postgres --tag \"test-suite-data\" --force\n\n# Verify test state\nnizam psql -- -c \"SELECT COUNT(*) FROM test_users\"\n```\n\n**Integration Testing:**\n\n```bash\n# Save clean state\nnizam snapshot create postgres --tag \"integration-baseline\"\n\n# Run integration tests...\n\n# Restore clean state for next test\nnizam snapshot restore postgres --tag \"integration-baseline\" --force\n```\n\n### Team Collaboration\n\n**Sharing Database States:**\n\n```bash\n# Team member creates useful snapshot\nnizam snapshot create postgres --tag \"demo-data-v2\" --note \"Updated demo dataset for Q4\"\n\n# Others can restore the same state\nnizam snapshot restore postgres --tag \"demo-data-v2\"\n\n# Verify shared state\nnizam psql -- -c \"SELECT version_info FROM schema_versions\"\n```\n\n**Debugging & Support:**\n\n```bash\n# Create snapshot for debugging\nnizam snapshot create postgres --tag \"bug-reproduction\" --note \"Issue #123 reproduction data\"\n\n# Quick data inspection\nnizam psql -- -c \"SELECT * FROM error_logs WHERE created_at > NOW() - INTERVAL '1 hour'\"\n\n# Share snapshot location with team\nls -la .nizam/snapshots/postgres/\n```\n\n### Production Debugging\n\n**Safe Local Debugging:**\n\n```bash\n# Import sanitized production data (when available)\n# NOTE: Production import features planned for future release\n\n# Create local debugging snapshot\nnizam snapshot create postgres --tag \"production-debug\" --note \"Sanitized prod data for issue #456\"\n\n# Debug locally with production-like data\nnizam psql -- -c \"EXPLAIN ANALYZE SELECT * FROM slow_query_table\"\n```\n\n### Backup & Recovery\n\n**Regular Backups:**\n\n```bash\n# Daily snapshot with cleanup\nnizam snapshot create postgres --tag \"daily-$(date +%Y%m%d)\"\nnizam snapshot prune postgres --keep 7  # Keep 1 week\n\n# Weekly snapshot with different retention\nnizam snapshot create postgres --tag \"weekly-$(date +%Y-W%U)\"\nnizam snapshot list postgres | grep weekly | tail -n +5 | cut -f1 | xargs -r nizam snapshot remove postgres\n```\n\n**Disaster Recovery:**\n\n```bash\n# List available snapshots\nnizam snapshot list postgres\n\n# Restore most recent snapshot\nnizam snapshot restore postgres --latest\n\n# Verify restore\nnizam psql -- -c \"SELECT NOW() as restored_at\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### Snapshot Creation Fails\n\n**Error: \"Container not running\"**\n\n```bash\n# Check service status\nnizam status\n\n# Start service if needed\nnizam up postgres\n```\n\n**Error: \"Permission denied accessing container\"**\n\n```bash\n# Check Docker permissions\ndocker ps\n\n# Verify nizam container naming\ndocker ps --filter \"name=nizam_\"\n```\n\n**Error: \"Insufficient disk space\"**\n\n```bash\n# Check available space\ndf -h .nizam/\n\n# Clean up old snapshots\nnizam snapshot prune postgres --keep 3\nnizam snapshot prune redis --keep 3\n```\n\n#### Restoration Issues\n\n**Error: \"Snapshot not found\"**\n\n```bash\n# List available snapshots\nnizam snapshot list postgres\n\n# Verify snapshot path exists\nls -la .nizam/snapshots/postgres/\n```\n\n**Error: \"Checksum verification failed\"**\n\n```bash\n# Snapshot may be corrupted - recreate it\nnizam snapshot create postgres --tag \"replacement-snapshot\"\n```\n\n#### One-liner Connection Issues\n\n**Error: \"Service not found\"**\n\n```bash\n# Check service configuration\nnizam status\n\n# Verify service type\nnizam psql postgres  # Use explicit service name\n```\n\n**Error: \"Connection refused\"**\n\n```bash\n# Check if service is running\nnizam status\n\n# Verify port mapping\ndocker port nizam_postgres\n\n# Check service health\nnizam health postgres\n```\n\n**Error: \"Authentication failed\"**\n\n```bash\n# Verify credentials in configuration\ncat .nizam.yaml | grep -A 5 postgres\n\n# Try explicit credentials\nnizam psql --user postgres --db postgres\n```\n\n### Performance Optimization\n\n#### Large Database Snapshots\n\n**Use appropriate compression:**\n\n```bash\n# For large databases, zstd provides best balance\nnizam snapshot create postgres --compress zstd\n\n# For maximum compatibility, use gzip\nnizam snapshot create postgres --compress gzip\n\n# For fastest creation (small DBs), disable compression\nnizam snapshot create postgres --compress none\n```\n\n**Monitor snapshot sizes:**\n\n```bash\n# Check snapshot disk usage\ndu -sh .nizam/snapshots/*\n\n# List snapshots by size\nnizam snapshot list --json | jq -r '.snapshots[] | \"\\(.size) \\(.service) \\(.tag)\"' | sort -n\n```\n\n#### Connection Performance\n\n**Host vs Container Execution:**\n\n```bash\n# Install database clients on host for better performance\nbrew install postgresql redis\n\n# Verify host binaries are found\nwhich psql redis-cli\n\n# Commands will automatically use host binaries when available\nnizam psql    # Uses host psql if available\nnizam redis-cli  # Uses host redis-cli if available\n```\n\n### Debugging Commands\n\n**Verbose snapshot creation:**\n\n```bash\nnizam -v snapshot create postgres --tag debug-snapshot\n```\n\n**Check snapshot manifest:**\n\n```bash\ncat .nizam/snapshots/postgres/20240810-143022-debug-snapshot/manifest.json | jq .\n```\n\n**Verify snapshot integrity:**\n\n```bash\n# Check file checksums match manifest\ncd .nizam/snapshots/postgres/20240810-143022-debug-snapshot/\nsha256sum *.zst\n# Compare with manifest.json checksums\n```\n\n**Connection debugging:**\n\n```bash\n# Test manual connection\nnizam exec postgres psql -U user -d mydb -c \"SELECT 1\"\n\n# Compare with smart connection\nnizam -v psql -- -c \"SELECT 1\"\n```\n\n### Getting Help\n\nFor additional support:\n\n1. **Check logs**: Use `nizam -v` for verbose output\n2. **Verify configuration**: Run `nizam validate` and `nizam doctor`\n3. **Service status**: Check `nizam status` and `nizam health`\n4. **Docker state**: Verify with `docker ps` and `docker logs nizam_<service>`\n\n---\n\n_For more information, see the main [README](../README.md) or [CLI Commands documentation](COMMANDS.md)._\n",
      "order": 4,
      "category": "Features"
    },
    {
      "slug": "docs-doctor",
      "title": "Doctor Features Documentation",
      "content": "# Doctor Features Documentation\n\nThe nizam doctor system provides comprehensive development environment validation and operational reliability tools. This document covers all doctor-related features and their usage.\n\n## Overview\n\nThe doctor system consists of several interconnected tools designed to ensure your development environment is properly configured and your services are running reliably:\n\n- **Environment Doctor** (`nizam doctor`) - Preflight environment validation\n- **Configuration Validation** (`nizam validate`) - Config file syntax and structure checking  \n- **Configuration Linting** (`nizam lint`) - Best practices enforcement\n- **Service Readiness** (`nizam wait-for`) - Service availability checking\n- **Retry Operations** (`nizam retry`) - Intelligent failure recovery\n- **Self-Update** (`nizam update`) - Automatic tool updates\n- **Shell Completion** (`nizam completion`) - Enhanced CLI productivity\n\n## Environment Doctor (`nizam doctor`)\n\n### Purpose\nComprehensive preflight checks to validate your Docker environment and detect common configuration issues before they cause problems.\n\n### Quick Start\n```bash\n# Run all environment checks\nnizam doctor\n\n# Skip specific checks\nnizam doctor --skip net.mtu,disk.free\n\n# JSON output for automation\nnizam doctor --json\n\n# Attempt automatic fixes\nnizam doctor --fix\n\n# Verbose diagnostics\nnizam doctor --verbose\n```\n\n### Available Checks\n\n#### Docker Infrastructure\n- **`docker.daemon`** - Verify Docker daemon connectivity\n- **`docker.compose`** - Ensure Docker Compose plugin availability\n\n#### System Resources  \n- **`disk.free`** - Check available disk space (warns if <1GB)\n- **`net.mtu`** - Validate network MTU configuration\n\n#### Service Ports\n- **`port.{PORT}`** - Dynamic port availability checks for all configured services\n\n### Sample Output\n```\n‚úî docker.daemon       Docker daemon responding\n‚úî docker.compose      Docker Compose plugin available\n! net.mtu              non-standard MTU detected\n  VPNs may lower MTU; if Docker networking is flaky, align MTU in daemon.json\n‚úñ port.5432            port in use\n  Change host port for service postgres in .nizam.yaml\n  Or stop the process using the port\n\nSummary: required_failed=1 advisory_failed=1\n```\n\n### Advanced Usage\n\n#### Selective Check Execution\n```bash\n# Skip network and disk checks\nnizam doctor --skip net.mtu,disk.free\n\n# Skip all port checks\nnizam doctor --skip port.*\n\n# Only run Docker checks\nnizam doctor --skip disk.free,net.mtu,port.*\n```\n\n#### Automation Integration\n```bash\n# CI/CD pipeline usage\nnizam doctor --json | jq '.summary.required_failed == 0'\n\n# Pre-commit hook\nif ! nizam doctor --json >/dev/null 2>&1; then\n    echo \"Environment check failed. Run 'nizam doctor' for details.\"\n    exit 1\nfi\n```\n\n#### Fix Attempts\n```bash\n# Attempt automatic fixes where supported\nnizam doctor --fix\n\n# Verbose fix output\nnizam doctor --fix --verbose\n```\n\n### Configuration\nEnvironment variables for customization:\n- `NIZAM_DOCTOR_TIMEOUT` - Override default check timeout\n- `NIZAM_DOCTOR_CONCURRENCY` - Override default concurrency limit\n\n## Configuration Validation (`nizam validate`)\n\n### Purpose\nValidate nizam configuration file syntax and structure before deployment or service startup.\n\n### Usage\n```bash\n# Validate default config\nnizam validate\n\n# Validate specific file\nnizam validate --file ./production.yaml\n\n# JSON output for automation\nnizam validate --json\n\n# Strict mode (exit non-zero on any issues)  \nnizam validate --strict\n```\n\n### Validation Features\n- ‚úÖ YAML syntax validation with detailed error reporting\n- üîç Service structure verification\n- üìã Required field checking (services, image, etc.)\n- üî¢ Profile validation\n- üìä Multiple output formats (human-readable, JSON)\n\n### Sample Output\n```bash\n# Success\n‚úî Configuration is valid\n  Profile: dev\n  Services: 7\n\n# Failure\n‚úñ Configuration validation failed\n  Error: services.postgres.image is required\n  Line: 5, Column: 3\n```\n\n### Integration Examples\n\n#### Pre-commit Hook\n```bash\n#!/bin/bash\n# .git/hooks/pre-commit\nnizam validate --strict\nif [ $? -ne 0 ]; then\n    echo \"Configuration validation failed!\"\n    exit 1\nfi\n```\n\n#### CI/CD Pipeline\n```yaml\n# GitHub Actions\n- name: Validate Configuration\n  run: |\n    nizam validate --json --strict\n    echo \"Configuration is valid\"\n```\n\n## Configuration Linting (`nizam lint`)\n\n### Purpose\nAnalyze configurations for best practices, security issues, and potential problems using an extensible rule framework.\n\n### Usage\n```bash\n# Lint default configuration\nnizam lint\n\n# Lint specific file\nnizam lint --file ./config.yaml\n\n# JSON output for CI/CD\nnizam lint --json\n```\n\n### Built-in Rules\n\n#### `no-latest` (Error)\n**Problem:** `:latest` image tags are mutable and non-reproducible\n**Detection:** Images without explicit tags or with `:latest` suffix\n**Fix:** Pin to specific version tags\n\n```yaml\n# ‚ùå Problematic\nservices:\n  web:\n    image: nginx:latest\n  api:\n    image: myapp  # defaults to :latest\n\n# ‚úÖ Recommended  \nservices:\n  web:\n    image: nginx:1.21.6\n  api:\n    image: myapp:v2.1.0\n```\n\n#### `ports-shape` (Error)\n**Problem:** Invalid port mapping format\n**Detection:** Malformed host:container port syntax\n**Fix:** Use correct `host:container` format\n\n```yaml\n# ‚ùå Problematic\nservices:\n  web:\n    ports:\n      - \"abc:80\"    # Invalid host port\n      - \"8080-80\"   # Wrong separator\n\n# ‚úÖ Recommended\nservices:\n  web:\n    ports:\n      - \"8080:80\"\n      - \"443:443\"\n```\n\n#### `limits` (Warning)\n**Problem:** Missing resource limits can cause resource exhaustion\n**Detection:** Services without CPU or memory limits\n**Fix:** Add resource constraints for predictable behavior\n\n```yaml\n# ‚ùå No limits (will trigger warning)\nservices:\n  database:\n    image: postgres:14\n    ports: [\"5432:5432\"]\n\n# ‚úÖ With limits\nservices:\n  database:\n    image: postgres:14\n    ports: [\"5432:5432\"]\n    resources:\n      cpus: \"1.0\"\n      memory: \"512m\"\n```\n\n### Sample Output\n```\n‚úñ services.web.image: image tag missing or ':latest' not allowed (no-latest)\n  Fix: pin to a specific tag, e.g. 'nginx:1.21'\n\n! services.database: consider setting CPU/memory limits (limits)\n  Fix: add 'resources: { cpus: \"1.0\", memory: \"512m\" }'\n\nSummary: 1 error, 1 warning\n```\n\n### CI/CD Integration\n```bash\n# Fail build on linting errors\nnizam lint --json | jq -e '.summary.errors == 0'\n\n# Generate lint report\nnizam lint --json > lint-results.json\n```\n\n## Service Readiness (`nizam wait-for`)\n\n### Purpose\nWait for services to become ready before proceeding with dependent operations, preventing race conditions in startup sequences.\n\n### Usage\n```bash\n# Wait for specific service\nnizam wait-for database\n\n# Wait for multiple services  \nnizam wait-for web database cache\n\n# Wait for all configured services\nnizam wait-for\n\n# Custom timeout and check interval\nnizam wait-for --timeout 60s --interval 2s database\n```\n\n### Readiness Check Types\n\n#### Port Connectivity\nTCP connection tests to verify service ports are accepting connections:\n```yaml\nservices:\n  postgres:\n    ports: [\"5432:5432\"]  # Will check localhost:5432\n```\n\n#### HTTP Health Checks\nHTTP endpoint availability testing:\n```yaml  \nservices:\n  web:\n    health_check:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n```\n\n#### Container Status\nDocker container running state as fallback.\n\n### Sample Output\n```\nWaiting for 3 service(s) to become ready (timeout: 30s)...\n‚è≥ database: waiting for ports...\n‚úî cache: port 6379 is ready\n‚è≥ web: waiting for health check...\n‚úî All services are ready (took 12.3s)\n```\n\n### Integration Patterns\n\n#### Dependent Service Startup\n```bash\n# Start database first, then dependent services\nnizam up postgres\nnizam wait-for postgres --timeout 30s\nnizam up web api\n```\n\n#### CI/CD Testing\n```bash\n# Ensure services are ready before running tests\nnizam up\nnizam wait-for --timeout 120s\nnpm test\n```\n\n## Retry Operations (`nizam retry`)\n\n### Purpose\nRetry failed operations with intelligent exponential backoff to handle transient failures in Docker operations, network issues, or resource conflicts.\n\n### Usage\n```bash\n# Retry start command with defaults (3 attempts, 1s initial delay)\nnizam retry start\n\n# Custom retry configuration\nnizam retry start --attempts 5 --delay 2s\n\n# Retry specific services\nnizam retry start web database --attempts 3\n```\n\n### Supported Operations\n- **`start`** - Start services with retry logic\n- **`stop`** - Stop services with retry logic  \n- **`restart`** - Restart services with retry logic\n- **`pull`** - Pull images with retry logic\n- **`build`** - Build images with retry logic\n\n### Retry Behavior\n- **Exponential Backoff:** 1s ‚Üí 2s ‚Üí 4s ‚Üí 8s ‚Üí 16s\n- **Progress Reporting:** Shows attempt numbers and wait times\n- **Graceful Failure:** Clear error messages after all attempts fail\n\n### Sample Output\n```\nAttempt 1/3: Running 'nizam start'\n‚úñ Attempt 1 failed: port 5432 already in use\nWaiting 1s before next attempt...\nAttempt 2/3: Running 'nizam start'  \n‚úñ Attempt 2 failed: port 5432 already in use\nWaiting 2s before next attempt...\nAttempt 3/3: Running 'nizam start'\n‚úî Command succeeded on attempt 3\n```\n\n### Use Cases\n- **Network Issues:** Transient connectivity problems\n- **Resource Conflicts:** Temporary port or resource unavailability\n- **Image Pulls:** Unreliable registry connections\n- **Service Dependencies:** Services starting in wrong order\n\n## Self-Update (`nizam update`)\n\n### Purpose\nKeep nizam up-to-date with the latest features, bug fixes, and security updates through automatic GitHub releases integration.\n\n### Usage\n```bash\n# Check for updates without installing\nnizam update --check\n\n# Update to latest stable version\nnizam update\n\n# Include prerelease versions\nnizam update --prerelease\n```\n\n### Update Process\n1. **Version Check:** Compare current version with GitHub releases\n2. **Binary Detection:** Find appropriate binary for your platform\n3. **Safe Download:** Download to temporary location\n4. **Atomic Replace:** Replace current binary safely with rollback capability\n5. **Verification:** Confirm update success\n\n### Sample Output\n```\nCurrent version: v1.2.0\nLatest version: v1.3.0\nüì¶ Update available\nDownloading v1.3.0...\n‚úî Successfully updated to v1.3.0\n```\n\n### Platform Support\n- **Linux:** amd64, arm64\n- **macOS:** amd64, arm64 (Apple Silicon)\n- **Windows:** amd64\n\n## Shell Completion (`nizam completion`)\n\n### Purpose\nGenerate shell completion scripts for faster and more accurate command-line usage.\n\n### Installation\n\n#### Bash\n```bash\n# Temporary (current session)\nsource <(nizam completion bash)\n\n# Permanent (add to ~/.bashrc)\necho 'source <(nizam completion bash)' >> ~/.bashrc\n```\n\n#### Zsh\n```bash\n# Temporary (current session)  \nsource <(nizam completion zsh)\n\n# Permanent (add to ~/.zshrc)\necho 'source <(nizam completion zsh)' >> ~/.zshrc\n```\n\n#### Fish\n```bash\n# Temporary (current session)\nnizam completion fish | source\n\n# Permanent\nnizam completion fish > ~/.config/fish/completions/nizam.fish\n```\n\n#### PowerShell\n```powershell\n# Current session\nnizam completion powershell | Out-String | Invoke-Expression\n\n# Permanent (add to profile)\nnizam completion powershell >> $PROFILE\n```\n\n### Features\n- **Command Completion:** All nizam commands and subcommands\n- **Flag Completion:** Command-line options and their values\n- **Service Names:** Dynamic completion of configured service names\n- **File Paths:** Intelligent file and directory completion\n\n## Workflow Integration\n\n### Development Environment Setup\n```bash\n#!/bin/bash\n# setup-dev.sh - Reliable development environment setup\n\necho \"üîç Checking environment...\"\nnizam doctor --fix || exit 1\n\necho \"‚úÖ Validating configuration...\"  \nnizam validate --strict || exit 1\n\necho \"üîç Linting configuration...\"\nnizam lint || echo \"‚ö†Ô∏è Linting warnings detected\"\n\necho \"üöÄ Starting services with retry...\"\nnizam retry start --attempts 3 || exit 1\n\necho \"‚è≥ Waiting for services to be ready...\"\nnizam wait-for --timeout 60s || exit 1\n\necho \"‚úÖ Development environment ready!\"\n```\n\n### CI/CD Pipeline Integration\n```yaml\n# .github/workflows/test.yml\nname: Test Environment\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Install nizam\n        run: |\n          # Install nizam binary\n          curl -L https://github.com/user/nizam/releases/latest/download/nizam_linux_amd64 -o nizam\n          chmod +x nizam\n          sudo mv nizam /usr/local/bin/\n          \n      - name: Validate Environment\n        run: |\n          nizam doctor --json\n          nizam validate --strict\n          nizam lint --json\n          \n      - name: Start Services\n        run: |\n          nizam retry start --attempts 3\n          nizam wait-for --timeout 120s\n          \n      - name: Run Tests\n        run: |\n          # Your test commands here\n          npm test\n          \n      - name: Cleanup\n        if: always()\n        run: nizam down --force\n```\n\n### Production Deployment Checks\n```bash\n#!/bin/bash\n# deploy-check.sh - Production readiness validation\n\necho \"üîç Production environment check...\"\nnizam doctor --json > doctor-report.json\n\nif ! jq -e '.summary.required_failed == 0' doctor-report.json; then\n    echo \"‚ùå Critical environment issues detected\"\n    jq '.results[] | select(.status == \"fail\")' doctor-report.json\n    exit 1\nfi\n\necho \"‚úÖ Validating production config...\"\nnizam validate --file production.yaml --strict || exit 1\n\necho \"üîç Linting production config...\"\nnizam lint --file production.yaml --json > lint-report.json\n\nif ! jq -e '.summary.errors == 0' lint-report.json; then\n    echo \"‚ùå Configuration errors detected\"\n    jq '.findings[] | select(.severity == \"error\")' lint-report.json\n    exit 1\nfi\n\necho \"‚úÖ Production deployment checks passed\"\n```\n\n## Troubleshooting\n\n### Common Doctor Issues\n\n#### Docker Daemon Connection Failed\n```\n‚úñ docker.daemon        Docker daemon not responding\n```\n**Solutions:**\n- Start Docker Desktop or Docker daemon\n- Check Docker daemon socket permissions\n- Verify Docker installation\n\n#### Port Conflicts  \n```\n‚úñ port.5432            port in use\n```\n**Solutions:**\n- Identify conflicting process: `lsof -i :5432`\n- Use different host port in configuration\n- Stop conflicting service\n\n#### MTU Configuration Warnings\n```\n! net.mtu              non-standard MTU detected\n```\n**Solutions:**\n- Common with VPN connections\n- Configure Docker daemon MTU in `/etc/docker/daemon.json`:\n  ```json\n  {\n    \"mtu\": 1350\n  }\n  ```\n- Restart Docker daemon after changes\n\n### Configuration Issues\n\n#### YAML Syntax Errors\n- Use proper indentation (spaces, not tabs)\n- Validate YAML syntax with online validators\n- Check for missing colons or brackets\n\n#### Service Definition Problems\n- Ensure required fields (image, ports) are present\n- Validate port mapping format (\"host:container\")\n- Check image tag format and availability\n\n### Performance Considerations\n\n#### Doctor Check Performance\n- Use `--skip` to exclude unnecessary checks\n- Set `NIZAM_DOCTOR_CONCURRENCY` for parallel execution\n- Cache results for repeated runs in CI/CD\n\n#### Large Configuration Files\n- Lint incrementally during development\n- Use profiles to separate environments\n- Split large configurations into multiple files\n\n## Best Practices\n\n### Environment Validation\n1. **Run doctor checks early** - Before any development work\n2. **Automate in CI/CD** - Catch issues before deployment  \n3. **Fix systematically** - Address errors before warnings\n4. **Monitor trends** - Track recurring issues\n\n### Configuration Management\n1. **Validate continuously** - On every change\n2. **Lint aggressively** - Enforce best practices early\n3. **Version configurations** - Track changes over time\n4. **Profile separation** - Different rules for different environments\n\n### Service Dependencies\n1. **Wait explicitly** - Don't assume services are ready\n2. **Retry strategically** - Handle transient failures gracefully\n3. **Timeout appropriately** - Balance reliability with speed\n4. **Monitor readiness** - Track startup performance\n\n### Tool Maintenance\n1. **Update regularly** - Keep nizam current\n2. **Enable completion** - Improve CLI productivity\n3. **Document workflows** - Share knowledge with team\n4. **Monitor usage** - Optimize based on actual patterns\n",
      "order": 5,
      "category": "Features"
    },
    {
      "slug": "docs-host_binary_detection",
      "title": "Host Binary Detection Implementation",
      "content": "# Host Binary Detection Implementation\n\nThis document describes the host binary detection feature implemented for database CLI commands in nizam.\n\n## Overview\n\nThe host binary detection system automatically detects if database client binaries (psql, mysql, redis-cli, mongosh) are available on the host system and uses them when possible, falling back gracefully to container execution when binaries are not found.\n\n## Architecture\n\n### Core Components\n\n1. **`internal/binary` package** - Central binary detection with caching\n2. **`internal/resolve` package** - Integration point for service resolution\n3. **Database CLI commands** - Updated to use host binaries when available\n\n### Binary Detection Flow\n\n```\nUser runs command (e.g. `nizam psql`)\n        ‚Üì\nCheck if psql binary exists on host\n        ‚Üì\n    Available?\n   ‚Üô         ‚Üò\n Yes          No\n  ‚Üì            ‚Üì\nUse host     Use container\nbinary       execution\n```\n\n## Implementation Details\n\n### Binary Package\n\nThe `internal/binary` package provides:\n\n- **Thread-safe caching** - Results are cached to avoid repeated filesystem lookups\n- **Cross-platform compatibility** - Uses `exec.LookPath` for platform-agnostic detection\n- **ClientType enum** - Type-safe constants for supported database clients\n- **Cache management** - Functions to clear cache when needed\n\n```go\n// Check if PostgreSQL client is available\nif binary.HasBinary(binary.PostgreSQL) {\n    // Use host binary\n} else {\n    // Fall back to container\n}\n```\n\n### Supported Database Clients\n\n| Database   | Binary      | ClientType Constant |\n|------------|-------------|---------------------|\n| PostgreSQL | `psql`      | `binary.PostgreSQL` |\n| MySQL      | `mysql`     | `binary.MySQL`      |\n| Redis      | `redis-cli` | `binary.Redis`      |\n| MongoDB    | `mongosh`   | `binary.MongoDB`    |\n\n### Command Integration\n\nEach database CLI command follows the same pattern:\n\n1. **Detection** - Check if host binary exists using `binary.HasBinary()`\n2. **Host execution** - Execute using `exec.Command()` with proper TTY forwarding\n3. **Container fallback** - Use `dockerx.ExecTTY()` if host binary unavailable\n4. **Exit code handling** - Proper exit code forwarding for both execution methods\n\n## Benefits\n\n### Performance\n- **Faster startup** - No Docker overhead when using host binaries\n- **Native feel** - Direct binary execution provides better responsiveness\n- **Cached detection** - Binary availability is cached to avoid repeated checks\n\n### User Experience\n- **Seamless fallback** - Transparent container execution when binaries missing\n- **Consistent interface** - Same command syntax regardless of execution method\n- **Debug logging** - Clear indication of which execution method is being used\n\n### Compatibility\n- **Cross-platform** - Works on macOS, Linux, and Windows\n- **Version independence** - Works with any version of database clients\n- **Configuration agnostic** - No configuration changes required\n\n## Usage Examples\n\n```bash\n# These commands automatically detect and use host binaries when available\n\n# PostgreSQL\nnizam psql                    # Connect to first PostgreSQL service\nnizam psql postgres -- -c \"SELECT version()\"\n\n# MySQL  \nnizam mysql                   # Connect to first MySQL service\nnizam mysql -- -e \"SHOW DATABASES\"\n\n# Redis\nnizam redis-cli               # Connect to first Redis service\nnizam redis-cli -- ping\n\n# MongoDB\nnizam mongosh                 # Connect to first MongoDB service\nnizam mongosh -- --eval \"db.version()\"\n```\n\n## Debug Information\n\nUse the `--verbose` flag to see which execution method is being used:\n\n```bash\nnizam --verbose psql\n# Output: \"Using host psql binary\" or \"psql not found on host, using container execution\"\n```\n\n## Testing\n\nThe implementation includes comprehensive tests:\n\n- **Binary detection tests** - Verify correct detection on the current system\n- **Cache behavior tests** - Ensure caching works correctly\n- **Integration tests** - Verify commands work with both execution methods\n\nRun tests with:\n```bash\ngo test ./internal/binary -v\ngo test ./internal/resolve -v\n```\n\n## Future Enhancements\n\nPotential improvements for the binary detection system:\n\n1. **Version checking** - Detect minimum required versions of client binaries\n2. **Custom binary paths** - Allow users to specify custom paths for binaries\n3. **Installation suggestions** - Suggest how to install missing binaries\n4. **Configuration options** - Allow users to force container execution\n5. **Performance metrics** - Track execution time differences between methods\n",
      "order": 6,
      "category": "Features"
    },
    {
      "slug": "docs-mongodb_support",
      "title": "MongoDB Support Implementation",
      "content": "# MongoDB Support Implementation\n\n## Overview\n\nThis document summarizes the implementation of MongoDB snapshot and CLI support in `nizam`, completing a major data lifecycle management milestone.\n\n## Features\n\n### 1. MongoDB Snapshot Engine (`internal/snapshot/mongodb_engine.go`)\n\n**Core Functionality:**\n\n- Full `mongodump`/`mongorestore` integration with streaming support\n- Multi-compression support (zstd, gzip, none)\n- Atomic operations with temporary files and checksums\n- Rich error handling and logging\n- Database drop functionality for clean restores\n\n**Key Methods:**\n\n- `Create()` - Creates MongoDB snapshots using mongodump with archive format\n- `Restore()` - Restores MongoDB snapshots using mongorestore\n- `CanHandle()` - Handles both \"mongo\" and \"mongodb\" engine types\n- `GetEngineType()` - Returns \"mongo\" for consistency with resolve package\n\n**Technical Details:**\n\n- Uses `mongodump --archive --gzip` for efficient streaming backups\n- Supports authentication via `--username`/`--password` flags\n- Implements force restore with database recreation\n- Integrated checksum verification for data integrity\n\n### 2. MongoDB One-liner CLI (`cmd/mongosh.go`)\n\n**Core Functionality:**\n\n- Auto-discovery of MongoDB services from configuration\n- Smart credential resolution from environment variables\n- Host binary detection with container execution fallback\n- Pass-through argument support for native mongosh commands\n\n**Key Features:**\n\n- Service auto-discovery when no service name specified\n- Connection string building with proper MongoDB URLs\n- Credential redaction in logs for security\n- Support for both host and container execution modes\n\n**Usage Examples:**\n\n```bash\n# Auto-connect to first MongoDB service\nnizam mongosh\n\n# Connect to specific service\nnizam mongosh mydb\n\n# Override connection parameters\nnizam mongosh --user admin --db myapp\n\n# Pass arguments to mongosh\nnizam mongosh -- --eval \"db.version()\"\n```\n\n### 3. Engine Registration and Integration\n\n**Service Registration:**\n\n- MongoDB engine registered in snapshot service (`internal/snapshot/service.go`)\n- Supports both \"mongo\" and \"mongodb\" engine identifiers\n- Fully integrated with existing snapshot lifecycle operations\n\n**Resolution Integration:**\n\n- Enhanced resolve package to handle MongoDB environment variables\n- Added support for `MONGO_INITDB_ROOT_USERNAME`, `MONGO_INITDB_ROOT_PASSWORD`\n- Proper engine detection from image names and service names\n\n### 4. Testing and Quality Assurance\n\n**Unit Tests:**\n\n- Comprehensive test coverage for MongoDB engine (`mongodb_engine_test.go`)\n- Engine type and capability testing\n- Integration with existing test infrastructure\n\n**Build Verification:**\n\n- All code compiles successfully\n- All existing tests continue to pass\n- New MongoDB-specific tests validate core functionality\n\n## Architecture Decisions\n\n### 1. Engine Type Consistency\n\n- Used \"mongo\" as primary engine identifier for consistency with existing resolve package\n- Maintained backward compatibility with \"mongodb\" identifier\n- Aligned with existing PostgreSQL/MySQL patterns\n\n### 2. Command Integration\n\n- Follows existing patterns from `psql.go` and `mysql.go` implementations\n- Maintains consistent argument parsing and credential handling\n- Preserves security practices with credential redaction\n\n### 3. Snapshot Implementation\n\n- Leverages existing compression and manifest infrastructure\n- Maintains atomic operations pattern with temporary files\n- Integrated seamlessly with existing snapshot lifecycle commands\n\n## Updated Features\n\n### Engine Support Matrix\n\n| Engine      | Snapshot | One-liner CLI            | Health Checks |\n| ----------- | -------- | ------------------------ | ------------- |\n| PostgreSQL  | ‚úÖ       | ‚úÖ (`nizam psql`)        | ‚úÖ            |\n| MySQL       | ‚úÖ       | ‚úÖ (`nizam mysql`)       | ‚úÖ            |\n| Redis       | ‚úÖ       | ‚úÖ (`nizam redis-cli`)   | ‚úÖ            |\n| **MongoDB** | **‚úÖ**   | **‚úÖ** (`nizam mongosh`) | ‚úÖ            |\n\n## Usage Examples\n\n### MongoDB Snapshot Operations\n\n```bash\n# Create MongoDB snapshot\nnizam snapshot create mongodb --tag \"before-migration\"\n\n# List MongoDB snapshots\nnizam snapshot list mongodb\n\n# Restore latest MongoDB snapshot\nnizam snapshot restore mongodb --latest\n\n# Prune old MongoDB snapshots\nnizam snapshot prune mongodb --keep 5\n```\n\n### MongoDB CLI Access\n\n```bash\n# Connect to MongoDB service\nnizam mongosh\n\n# Run MongoDB commands\nnizam mongosh -- --eval \"db.stats()\"\n\n# Connect with overrides\nnizam mongosh --user admin --db production\n```\n\n## Verification\n\nAll implementation has been verified through:\n\n- ‚úÖ Successful Go build (`go build`)\n- ‚úÖ All unit tests passing (`go test ./internal/snapshot/...`)\n- ‚úÖ CLI help output verification\n- ‚úÖ Command registration verification\n",
      "order": 7,
      "category": "Features"
    },
    {
      "slug": "examples-interactive-demo",
      "title": "Interactive Demo",
      "content": "# Interactive Template Variables Demo\n\nThis document demonstrates how to use the new interactive template variables feature in Nizam.\n\n## Overview\n\nThe following templates now support customizable variables with interactive prompts:\n\n- **postgres**: PostgreSQL database with custom credentials, ports, and volumes\n- **mysql**: MySQL database with custom user/root credentials, database name, and ports  \n- **redis**: Redis cache with optional password, custom port, and volume\n- **mongodb**: MongoDB with custom root credentials and port\n- **rabbitmq**: RabbitMQ with custom credentials and ports for AMQP + management UI\n\n## Usage Examples\n\n### 1. Interactive Mode (Default)\n```bash\n# Add PostgreSQL with interactive configuration\nnizam add postgres\n\n# You'll be prompted for:\n# - DB_USER (default: user)\n# - DB_PASSWORD (default: password) \n# - DB_NAME (default: myapp)\n# - PORT (default: 5432)\n# - VOLUME_NAME (default: pgdata)\n```\n\n### 2. Default Values Mode\n```bash\n# Skip prompts and use all default values\nnizam add postgres --defaults\n```\n\n### 3. Custom Service Names\n```bash\n# Add with custom name and interactive config\nnizam add mysql --name production-db\n\n# Add with custom name and defaults\nnizam add redis --name cache --defaults\n```\n\n## Interactive Prompt Features\n\nWhen adding a template with variables in interactive mode, you'll see:\n\n- **Clear variable descriptions** with purpose and usage\n- **Default value suggestions** shown in brackets `[default]`\n- **Required field indicators** marked with `*`\n- **Type validation** (e.g., port numbers 1-65535)\n- **Pattern validation** where applicable\n- **Easy defaults** - just press Enter to use the default value\n\n## Example Interactive Session\n\n```\n‚öôÔ∏è  Configuring template 'postgres' for service 'mydb'\nüìù Please provide values for the following variables:\n\n  DB_USER *: PostgreSQL username [user]\n    Type: string\n    > myuser\n    ‚úÖ DB_USER = myuser\n\n  DB_PASSWORD *: PostgreSQL password [password]\n    Type: string\n    > securepass123\n    ‚úÖ DB_PASSWORD = securepass123\n\n  DB_NAME *: Database name to create [myapp]\n    Type: string\n    > \n    ‚úÖ DB_NAME = myapp\n\n  PORT: Host port to bind PostgreSQL [5432]\n    Type: port (pattern: ^[1-9][0-9]{0,4}$)\n    > 5433\n    ‚úÖ PORT = 5433\n\n  VOLUME_NAME: Docker volume name for data persistence [pgdata]\n    Type: string\n    > \n    ‚úÖ VOLUME_NAME = pgdata\n\n‚úÖ Template configured successfully!\n\n‚úÖ Added service 'mydb' from template 'postgres'\nüìù Configuration saved to .nizam.yaml\n\nüìã Service Details:\n   Image: postgres:16\n   Ports: [5433:5432]\n   Environment variables: 3 configured\n   Volume: pgdata\n\nüí° Template variables have been configured interactively\n\nüöÄ Run 'nizam up mydb' to start the service\n```\n\n## Validation Features\n\n- **Port validation**: Ensures ports are between 1-65535\n- **Required fields**: Won't accept empty values for required variables\n- **Type checking**: Validates integers, booleans, etc.\n- **Pattern matching**: Regex validation where specified\n\n## Template Variable Details\n\n### PostgreSQL\n- `DB_USER` (required): Database username\n- `DB_PASSWORD` (required): Database password  \n- `DB_NAME` (required): Database name to create\n- `PORT` (optional): Host port binding (default: 5432)\n- `VOLUME_NAME` (optional): Docker volume name (default: pgdata)\n\n### MySQL\n- `DB_USER` (required): MySQL username\n- `DB_PASSWORD` (required): MySQL user password\n- `ROOT_PASSWORD` (required): MySQL root password\n- `DB_NAME` (required): Database name to create\n- `PORT` (optional): Host port binding (default: 3306)\n- `VOLUME_NAME` (optional): Docker volume name (default: mysqldata)\n\n### Redis\n- `VERSION` (optional): Redis version (default: 7)\n- `PORT` (optional): Host port binding (default: 6379)\n- `PASSWORD` (optional): Redis password (empty = no auth)\n- `VOLUME_NAME` (optional): Docker volume name (default: redisdata)\n\n### MongoDB\n- `VERSION` (optional): MongoDB version (default: 7)\n- `ROOT_USERNAME` (required): MongoDB root username (default: admin)\n- `ROOT_PASSWORD` (required): MongoDB root password (default: password)\n- `PORT` (optional): Host port binding (default: 27017)\n- `VOLUME_NAME` (optional): Docker volume name (default: mongodata)\n\n### RabbitMQ\n- `VERSION` (optional): RabbitMQ version (default: 3-management)\n- `DEFAULT_USER` (required): RabbitMQ username (default: admin)\n- `DEFAULT_PASS` (required): RabbitMQ password (default: password)\n- `AMQP_PORT` (optional): AMQP protocol port (default: 5672)\n- `MANAGEMENT_PORT` (optional): Management UI port (default: 15672)\n- `VOLUME_NAME` (optional): Docker volume name (default: rabbitmqdata)\n",
      "order": 8,
      "category": "Examples"
    }
  ],
  "lastUpdated": "2025-08-12T23:54:29.797Z"
}